[
  {
    "app": "peer-dependency-checker",
    "appDescription": "Smart dependency compatibility checker that prevents peer dependency conflicts before you upgrade. Stop breaking builds - check compatibility first!",
    "slug": "peer-dependency-checker",
    "title": "🔍 peer-dependency-checker",
    "body": "# 🔍 peer-dependency-checker\n\n*Smart dependency compatibility checking before you upgrade*\n\nStop breaking your builds. Check compatibility first.\n\n---\n\n## 🚀 Quick Setup\n\nAdd peer dependency checking to any project in one command:\n\n```bash\n# One command setup - works with npm, yarn, pnpm, or bun\nnpx peer-dependency-checker setup\n\n# Or install globally first\nnpm install -g peer-dependency-checker\npdc setup\n```\n\n**What this does:**\n- ✅ Detects your package manager automatically\n- ✅ Adds pre/post-install hooks to your `package.json`  \n- ✅ Sets up automatic checking on installs\n- ✅ Works immediately with zero configuration\n\n---\n\n## ⚡ Installation\n\n```bash\n# Global install (recommended)\nnpm install -g peer-dependency-checker\n\n# Or use directly with npx\nnpx peer-dependency-checker scan\n```\n\n## 🎯 Usage\n\n```bash\n# Analyze your project for upgrade opportunities\npdc scan\n\n# Quick scan with minimal output\npdc scan --quick\n\n# Check specific packages before upgrading\npdc check react@19 react-dom@19\n\n# Deep peer dependency analysis  \npdc analyze\n\n# Pre-installation compatibility check\npdc precheck\n```\n\n## 📖 Examples\n\n### Project Health Check\n```bash\n$ pdc scan\n\n🔍 Scanning your project...\n\n📦 Project: my-app\n🔧 Package Manager: npm\n📋 Dependencies: 15 production, 8 development\n\n📈 OUTDATED PACKAGES\n────────────────────────────────────────\nreact: 18.3.1 → 19.1.0\n@types/node: 22.15.21 → 24.0.3\n\n🔗 PEER DEPENDENCY STATUS\n────────────────────────────────────────\nNo peer dependency warnings detected\n\n💡 RECOMMENDATIONS\n────────────────────────────────────────\n✅ All packages are up to date!\n```\n\n### Test Specific Upgrades\n```bash\n$ pdc check react@19 react-dom@19\n\n🧪 Testing 2 package(s)...\n\n✅ react@19\n   └── No peer dependencies required\n\n✅ react-dom@19\n   └── Peer deps: { react: '^19.1.0' }\n```\n\n## 🛠️ Commands\n\n| Command | Description |\n|---------|-------------|\n| `pdc scan` | Analyze current project for upgrade opportunities |\n| `pdc scan --quick` | Quick scan with minimal output |\n| `pdc check <packages>` | Test specific package upgrades |\n| `pdc analyze` | Deep peer dependency analysis |\n| `pdc analyze --brief` | Brief analysis with key findings |\n| `pdc precheck` | Pre-installation compatibility check |\n| `pdc setup` | One-command setup for external projects |\n\n## 🔧 Configuration\n\nWorks out-of-the-box with smart defaults. For custom settings, create `.pdcrc.json`:\n\n```json\n{\n  \"packageManager\": \"npm\",\n  \"riskTolerance\": \"medium\",\n  \"excludePackages\": [],\n  \"outputFormat\": \"colored\"\n}\n```\n\n📖 **[Configuration Guide →](./docs/CONFIG.md)**\n\n## 🤝 Contributing\n\nWe welcome contributions! \n\n```bash\ngit clone https://github.com/hyperdrift-io/peer-dependency-checker\ncd peer-dependency-checker\nnpm install\nnpm test\n```\n\n## 📄 License\n\nMIT © [Hyperdrift](https://hyperdrift.io)\n\n---\n\n**Built with ❤️ by the hyperdrift team**\n",
    "excerpt": "*Smart dependency compatibility checking before you upgrade*",
    "date": null,
    "tags": []
  },
  {
    "app": "genesis",
    "appDescription": "Genesis - Create scalable web applications stack",
    "slug": "genesis-v2",
    "title": "Genesis V2",
    "body": "# Genesis V2\n\n**One-command app creation** using Nuxt + Claude Code integration\n\n**Built with Go** for fast startup, single binary distribution, and zero dependencies.\n\n## What Genesis V2 Does\n\nGenesis creates a complete, working Nuxt 3 app automatically using AI. **No manual steps, no configuration** - just describe what you want and get a fully built app.\n\n**⚡ Powered by bun** for lightning-fast package management (5-10x faster than npm).\n\n## Installation\n\n### Prerequisites\n\n**Bun is required** for lightning-fast package management:\n\n```bash\n# macOS/Linux\ncurl -fsSL https://bun.sh/install | bash\n\n# Windows  \npowershell -c \"irm bun.sh/install.ps1 | iex\"\n\n# Or via npm\nnpm install -g bun\n```\n\nThen restart your terminal.\n\n### Download Binary (Recommended)\n\n```bash\n# macOS (Apple Silicon)\ncurl -L https://github.com/hyperdrift-io/genesis/releases/latest/download/genesis-darwin-arm64 -o genesis\nchmod +x genesis\nsudo mv genesis /usr/local/bin/\n\n# macOS (Intel)\ncurl -L https://github.com/hyperdrift-io/genesis/releases/latest/download/genesis-darwin-amd64 -o genesis\nchmod +x genesis\nsudo mv genesis /usr/local/bin/\n\n# Linux (x64)\ncurl -L https://github.com/hyperdrift-io/genesis/releases/latest/download/genesis-linux-amd64 -o genesis\nchmod +x genesis\nsudo mv genesis /usr/local/bin/\n\n# Windows (x64)\n# Download genesis-windows-amd64.exe from releases page\n```\n\n### Or Build from Source\n\n**Requires Go 1.19+ installed first:**\n\n```bash\n# Install Go if not already installed:\n# macOS: brew install go\n# Linux: sudo apt install golang-go  (Ubuntu/Debian)\n# Windows: Download from https://golang.org/dl/\n\n# Then install Genesis:\ngo install github.com/hyperdrift-io/genesis/cmd/genesis@latest\n\n# Or clone and build:\ngit clone https://github.com/hyperdrift-io/genesis.git\ncd genesis\nmake build\n```\n\n## Usage\n\n```bash\n# One command creates AND builds your entire app\ngenesis my-store \"E-commerce store for handmade jewelry\"\n\n# Wait a few minutes while AI builds your app...\n# ✓ Nuxt app created\n# ✓ Nuxt UI added  \n# ✓ AI context generated\n# ✓ Claude Code ready\n# ✓ App built successfully\n\ncd my-store\nbun run dev\n# Your complete app is ready! 🎉\n```\n\n## How It Works\n\n1. **Creates Nuxt 3 app** with `npx nuxi init`\n2. **Adds Nuxt UI** with `npx nuxi module add ui`  \n3. **Generates README.md** with your app description\n4. **Generates DEVELOPMENT.md** with Nuxt UI best practices\n5. **Installs Claude Code** (if not already installed)\n6. **Auto-builds the app** using Claude Code with intelligent prompts\n\n## What You Get\n\nA **complete, working application** with:\n- Modern homepage with hero section\n- Main functionality as described\n- Proper navigation and routing  \n- Nuxt UI components throughout\n- Responsive design with Tailwind CSS\n- Best practices and clean code\n\n## Examples\n\n```bash\n# E-commerce store\ngenesis jewelry-store \"E-commerce for handmade jewelry with custom sizing\"\n\n# SaaS application  \ngenesis project-tool \"Project management tool for small teams with kanban boards\"\n\n# Blog platform\ngenesis tech-blog \"Technical blog with article creation and comment system\"\n\n# Each creates a complete, working app automatically\n```\n\n## Continue Development\n\nAfter Genesis builds your app, continue enhancing it:\n\n```bash\ncd my-app\nclaude \"add user authentication with login/signup\"\nclaude \"implement payment processing with Stripe\"\nclaude \"add admin dashboard for content management\"\n```\n\n## Why This Approach Works\n\n- **Lightning-fast performance** - Bun provides 5-10x faster package management than npm\n- **Single binary distribution** - No dependencies, no runtime required\n- **Fast startup** - Go performance vs Node.js\n- **No templates to maintain** - AI generates fresh, modern code\n- **No configuration hell** - Works with Nuxt + Nuxt UI defaults  \n- **Always up-to-date** - Uses latest best practices\n- **Complete applications** - Not just scaffolding, but working apps\n- **AI-driven development** - Intelligent code generation and implementation\n\n## Development\n\n```bash\n# Build for current platform\nmake build\n\n# Build for all platforms  \nmake dist\n\n# Test locally\nmake dev\n\n# Install locally\nmake install\n```\n\n## Architecture\n\n```\ngenesis/\n├── cmd/genesis/            # CLI entry point\n├── internal/\n│   ├── generator/          # Main creation logic + Claude integration\n│   └── templates/          # README and dev guide generators\n├── Makefile               # Build automation\n└── go.mod                 # Go dependencies\n```\n\n**Benefits:** Single binary, fast startup, zero dependencies 🚀\n\n---\n\n*Genesis V1 archive available at tag `v1-archive`*\n",
    "excerpt": "**One-command app creation** using Nuxt + Claude Code integration",
    "date": null,
    "tags": []
  },
  {
    "app": "yield-max",
    "appDescription": "Comparison of Decentralised Finance (DefI) Yield Protocols to find the highest Return on Investment available",
    "slug": "yieldmax",
    "title": "YieldMax",
    "body": "# YieldMax\n\n# TODO\nUse Defi Lama values and / or graph (no made up values)\n\nCompare and optimize DeFi yield opportunities with transparent protocol analysis and risk assessment.\n\n[![Deploy to Production](https://github.com/yourusername/yieldmax/actions/workflows/deploy.yml/badge.svg)](https://github.com/yourusername/yieldmax/actions/workflows/deploy.yml)\n\n## Features\n\n- **Protocol Comparison** - Compare yields across multiple protocols\n- **Risk Assessment** - Understand the risks associated with each protocol\n- **Yield Simulation** - Project potential earnings based on investment amount and time\n- **Beginner Guides** - Learn about DeFi yield strategies\n\n## Quick Start\n\n```bash\n# Install dependencies\nbun install\n\n# Run development server\nbun run dev\n\n# Build for production\nbun run build\n\n# Run tests\nbun run test\n```\n\n## Tech Stack\n\n- **Next.js** - React framework with SSR and static site generation\n- **TypeScript** - Type-safe JavaScript\n- **Bun** - Fast JavaScript runtime and package manager\n- **React Query** - Data fetching and state management\n- **CSS Modules** - Scoped styling\n\n## Development\n\n### Testing\n\nWe use Bun's built-in test runner with React Testing Library:\n\n```bash\n# Run all tests\nbun test\n\n# Run tests in watch mode\nbun test --watch\n```\n\n### Linting\n\n```bash\n# Lint codebase\nbun run lint\n\n# Verify CSS styles\nbun run verify-styles\n```\n\n## Deployment\n\nDeployment is automated via GitHub Actions. When code is pushed to the main branch, it's automatically:\n\n1. Tested\n2. Linted\n3. Built\n4. Deployed to the production server\n\n## Project Structure\n\n- `/app` - Next.js app directory (Pages and layouts)\n- `/src` - Core source code\n  - `/api` - API functions and services\n  - `/components` - Reusable UI components\n  - `/hooks` - Custom React hooks\n  - `/types` - TypeScript type definitions\n  - `/__tests__` - Test files\n\n## Contributing\n\n1. Create a feature branch (`git checkout -b feature/amazing-feature`)\n2. Commit your changes (`git commit -m 'Add some amazing feature'`)\n3. Push to the branch (`git push origin feature/amazing-feature`)\n4. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
    "excerpt": "Use Defi Lama values and / or graph (no made up values)",
    "date": null,
    "tags": []
  },
  {
    "app": "whats-that-again",
    "appDescription": "What was that again? The app will help you remember exactly what it was",
    "slug": "whatsthatagain",
    "title": "WhatsThatAgain",
    "body": "# WhatsThatAgain\n\n> 🧠 **“For the things you *meant* to remember — and totally didn’t.”**\n\n---\n\n## 🪄 Never Forget That Link, Idea, or Genius Thought Again\n\nWhatsThatAgain is your **digital memory assistant** — a smart, searchable space that helps you **remember the things you forgot you even forgot**.\n\nYou know that moment when you:\n\n- Remember seeing something *really useful* online, but can't find it again?\n- Had a brilliant idea in the shower that evaporated by the time your socks were on?\n- Saved 37 tabs for “later” and now don’t even know *why* they’re open?\n\nYeah. This is the app for that.\n\n---\n\n## ⚡️ What It Does\n\n- 📌 Remembers links, ideas, and notes you add or save from anywhere  \n- 🔍 Helps you find them later — even when you don’t remember the right words  \n- 🤖 (Optional) Uses AI to connect vague memories to actual results  \n- 🗃️ Acts like your “searchable past self” with context\n\n---\n\n## 🧑‍💻 Use Cases (aka, “I wish I had this last week”)\n\n- “What was that tool someone mentioned on Discord at 2am…?”\n- “Where did I read that quote about bees and jazz?”\n- “I KNOW I saved that article about productivity myths. Somewhere.”\n- “I had an idea for my side project while half-asleep. It was genius. It's gone.”\n- “Why do I have 13 open tabs titled ‘Getting Started’?”\n\n---\n\n## 🧬 Why You'll Actually Use It\n\nUnlike to-do lists you abandon or notes you never look at, **WhatsThatAgain is built for recall, not just capture**. It’s designed to be:\n\n- Fast to use 🏃\n- Easy to search 🕵️\n- Funny enough to remember 🤪\n\n---\n\n## 🧠 Motto (Say It With Me)\n\n> **“If your brain had a Ctrl+Z — this would be it.”**\n\nStick that in your mental RAM.\n\n---\n\n## 🛠️ Roadmap Highlights\n\n- Browser extension for one-click saves\n- AI-powered fuzzy memory search (\"That thing with the yellow logo and crypto vibes?\")\n- Chat interface: ask your past self what the hell you were thinking\n- Mobile quick-capture mode\n- Memory score (yes, we rate your forgetfulness)\n\n---\n\n## 🚀 Get Involved\n\nThis is open source, fun, and dead serious about being useful.  \nIf you’ve ever sighed *“what was that again?”*, you’re already one of us.\n\nPull requests, bug reports, and memory joggers welcome.\n\n---\n\n**🔗 [hyperdrift-io/whats-that-again](https://github.com/hyperdrift-io/whats-that-again)**  \n✨ Built to remember the things that make you *you*.\n",
    "excerpt": "> 🧠 **“For the things you *meant* to remember — and totally didn’t.”**",
    "date": null,
    "tags": []
  },
  {
    "app": "alpha-drift",
    "appDescription": "Alpha Drift is an experimental platform for developing, testing, and analyzing advanced AI-driven decision-making algorithms, with a focus on adaptive learning, real-time data processing, and web3 trading automation.",
    "slug": "milestone-0-laying-the-foundation-for-alphadrift",
    "title": "Milestone 0: Laying the Foundation for AlphaDrift",
    "body": "\n# 🚀 Milestone 0: The First Brick in AlphaDrift's Journey\n\nImagine you're building a self-driving car. Before it can race down the highway, it needs eyes to see the road, a brain to remember what it's learned, and a safe, reliable engine. That's exactly where we started with AlphaDrift—except our \"car\" is an AI-powered crypto trading agent, and the \"road\" is the wild, unpredictable world of ([DeFi](https://en.wikipedia.org/wiki/Decentralized_finance)).\n\n## The Problem: Can You Trust the Data?\n\nCrypto markets never sleep. Prices jump, liquidity vanishes, and sometimes, the data you see is just plain wrong. For a trading bot, bad data isn't just an inconvenience—it's a recipe for disaster. Our mission? **Build a foundation that's so reliable, even the most cautious trader would trust it.**\n\nBut how do you do that in a world where:\n- Exchanges sometimes report different prices for the same asset ([price discovery](https://www.investopedia.com/terms/p/pricediscovery.asp))?\n- Data feeds ([oracles](https://chain.link/education/blockchain-oracles)) can go down, or worse, be manipulated?\n- Every decision (good or bad) is recorded forever on-chain ([blockchain immutability](https://www.investopedia.com/terms/b/blockchain.asp))?\n\n## The Journey: From Chaos to Clarity\n\nWe started by asking: **What does our bot need to make a good decision?**\n\n- It needs to see the market from multiple angles (not just one data source).\n- It needs a memory—so it can learn from the past, not just react to the present.\n- It needs to be testable and transparent, so we can trust every move it makes.\n\nSo, we rolled up our sleeves and got to work:\n\n### 1. Giving AlphaDrift Its \"Eyes\": The ProviderPool\n\nWe built the **ProviderPool**, a kind of market radar (see [market data aggregation](https://www.investopedia.com/terms/m/market-data.asp)). Instead of trusting a single data feed, AlphaDrift now listens to several—cross-checking prices, volumes, and other signals. If one provider goes dark or sends weird data, the others fill in the gaps. This is our first line of defense against the chaos of crypto.\n\n### 2. Building Its \"Memory\": The FeatureStore\n\nNext, we gave AlphaDrift a memory. Every few minutes, it takes a snapshot of the market and stores it in **TimescaleDB**, a database built for [time-series data](https://en.wikipedia.org/wiki/Time_series_database). This isn't just for show—by remembering the past, AlphaDrift can spot trends, learn from mistakes, and (soon) let its AI brain make smarter predictions.\n\n### 3. Sketching the \"Brain\": Strategy Stubs\n\nWe know the real magic will come from advanced strategies and AI ([algorithmic trading](https://www.investopedia.com/terms/a/algorithmictrading.asp)). But first, we needed placeholders—simple strategies that prove the system works, and give us a safe playground to test new ideas. These stubs are like the training wheels for what's to come.\n\n### 4. Making It Bulletproof: Tests & Docker\n\nIn finance, bugs are expensive. So we wrote tests for everything—over 90% coverage. And to make sure anyone can run AlphaDrift (on any machine), we packaged the database with <a href=\"https://www.docker.com/resources/what-container/\" target=\"_blank\">Docker</a> (containerization). One command, and you're up and running.\n\n## Why This Matters (Even If You're Not a Coder)\n\nIf you've ever wondered why so many trading bots fail, it's usually not the fancy math—it's the plumbing. Bad data, missing records, or a single untested assumption can bring down the whole system. By starting with a foundation that's reliable, transparent, and easy to extend, we're making sure AlphaDrift won't be just another bot lost in the DeFi jungle.\n\n- **Transparency**: Every decision is logged, every piece of data traceable ([auditability](https://en.wikipedia.org/wiki/Audit_trail)).\n- **Safety**: We test, we double-check, and we design for failure—because in crypto, it's not \"if\" something goes wrong, but \"when.\"\n- **Open Collaboration**: The project is open, documented, and ready for anyone to join—whether you're a coder, a trader, or just curious.\n\n## The Road Ahead\n\nWith the foundation set, the next milestones will bring AlphaDrift's brain to life: AI-powered predictions, risk management ([risk management in trading](https://www.investopedia.com/terms/r/riskmanagement.asp)), and (eventually) live trading. But every skyscraper starts with a single brick—and Milestone 0 is ours.\n\n**Curious about the next chapter? Stay tuned—this is just the beginning.**\n",
    "excerpt": "The first milestone in the AlphaDrift journey",
    "date": "2025-04-28T11:00:00",
    "tags": [
      "AlphaDrift",
      "trading",
      "web3",
      "foundation"
    ]
  },
  {
    "app": "keep-alive",
    "appDescription": "Keeps your services awake so you can sleep",
    "slug": "keep-alive-https-keepalive-tech",
    "title": "[keep-alive](https://keepalive.tech)",
    "body": "# [keep-alive](https://keepalive.tech)\n\n> ✦ _“Because downtime is for humans, not apps.”_\n\n---\n\n## ✦ What It Does\n\n**keep-alive** is a lightweight, self-hosted uptime pinger with a clean UI and zero distractions. It continuously monitors the health of multiple endpoints to prevent cold starts and unintentional sleep — especially on free-tier services or serverless APIs.\n\nIdeal for solo devs, cron wizards, indie hackers, and side project hoarders.\n\n---\n\n## ✦ Features\n\n- 🔗 Monitor health status of multiple URLs to prevent cold starts\n- ⚙️ Configurable ping intervals (1, 5, or 10 minutes)\n- 🧠 Per-endpoint customizable ping intervals\n- 🧭 Easy-to-use interface for managing endpoints\n- 📊 Real-time status updates with visual indicators\n- 🖥️ Background PM2 logs display\n- 🎨 Modern, responsive design with **Keep Alive Protocol** theme\n- 🔁 Live reload during development for easy UI testing\n\n---\n\n## ✦ Real Use Cases\n\n☍ “I need my cronjob to stay warm while I sleep.”  \n☍ “This keeps my Vercel + Notion API from freezing up.”  \n☍ “I run side projects on free tiers and don’t want to pay for uptime monitoring.”  \n☍ “I needed something simple and visual — not another YAML horror.”\n\n---\n\n## ✦ Security Considerations\n\nThis app was designed with security in mind:\n\n- ✅ Input validation for all URLs\n- ✅ Rate limiting and timeouts for URI health checks\n- ✅ Graceful error handling to prevent information leakage\n\n---\n\n<details>\n<summary>✦ Hack your own</summary>\n\n```bash\n# Clone the repo\ngit clone https://github.com/hyperdrift-io/keep-alive.git\ncd keep-alive\n\n# Install dependencies\nnpm install\n\n# Start the app\nnpm start\n```\n\n🛠 Modify your monitored URLs and intervals in [`config.json`](./config.json)\n\n</details>\n\n✦ _Open-source tools for the forgotten edge._\n",
    "excerpt": "> ✦ _“Because downtime is for humans, not apps.”_",
    "date": null,
    "tags": []
  }
]