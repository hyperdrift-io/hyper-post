{"version":3,"sources":["../src/setup.ts","../src/signup-templates.ts","../src/signup-manager.ts"],"sourcesContent":["import * as readline from 'readline';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { PLATFORM_SIGNUP_REQUIREMENTS, ALL_PLATFORM_SIGNUP_REQUIREMENTS, SignupTemplate, getSignupTemplate, validateSignupTemplate } from './signup-templates';\nimport { SignupManager } from './signup-manager';\n\n// ANSI color codes for shiny prompts\nconst colors = {\n  reset: '\\x1b[0m',\n  bright: '\\x1b[1m',\n  dim: '\\x1b[2m',\n\n  // Foreground colors\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n  cyan: '\\x1b[36m',\n  white: '\\x1b[37m',\n\n  // Background colors\n  bgRed: '\\x1b[41m',\n  bgGreen: '\\x1b[42m',\n  bgYellow: '\\x1b[43m',\n  bgBlue: '\\x1b[44m',\n  bgMagenta: '\\x1b[45m',\n  bgCyan: '\\x1b[46m',\n};\n\nclass HyperPostSetup {\n  private rl: readline.Interface;\n  private envPath: string;\n  private signupManager: SignupManager;\n  private isRunning: boolean = false;\n\n  constructor() {\n    // Create readline interface with proper configuration for both interactive and piped input\n    const isPiped = !process.stdin.isTTY || process.env.CI;\n    this.rl = readline.createInterface({\n      input: process.stdin,\n      output: isPiped ? null : process.stdout,\n      terminal: !isPiped\n    });\n    this.envPath = path.join(process.cwd(), '.env');\n    this.signupManager = new SignupManager();\n  }\n\n  private isPipedInput(): boolean {\n    return !process.stdin.isTTY || process.env.CI;\n  }\n\n  private printHeader(): void {\n    console.log(`${colors.bright}${colors.cyan}╔══════════════════════════════════════════════════════════╗${colors.reset}`);\n    console.log(`${colors.bright}${colors.cyan}║${colors.reset}${colors.bright}${colors.white}                 🚀 HYPERPOST SETUP WIZARD${colors.reset}${colors.bright}${colors.cyan}                 ║${colors.reset}`);\n    console.log(`${colors.bright}${colors.cyan}╚══════════════════════════════════════════════════════════╝${colors.reset}`);\n    console.log('');\n    console.log(`${colors.yellow}Create genuine social media accounts with complete profiles${colors.reset}`);\n    console.log(`${colors.yellow}for professional, trustworthy presence across platforms.${colors.reset}\\n`);\n  }\n\n  async run(): Promise<void> {\n    if (this.isRunning) {\n      console.log(`${colors.yellow}Setup is already running...${colors.reset}`);\n      return;\n    }\n    this.isRunning = true;\n\n    this.printHeader();\n\n    // Check if .env already exists and show current status\n    if (fs.existsSync(this.envPath)) {\n      console.log(`${colors.blue}📁 Existing Configuration Found:${colors.reset}`);\n      const existingPlatforms = this.signupManager.getConfiguredPlatforms();\n      if (existingPlatforms.length > 0) {\n        console.log(`${colors.green}Currently configured platforms:${colors.reset}`, existingPlatforms.join(', '));\n      } else {\n        console.log(`${colors.yellow}No platforms currently configured.${colors.reset}`);\n      }\n      console.log(`${colors.dim}New platform credentials will be added to existing configuration.${colors.reset}\\n`);\n    }\n\n    // Check for quick setup mode\n    const quickSetup = process.argv.includes('--quick') || process.argv.includes('-q');\n    if (quickSetup) {\n      await this.quickSetup();\n      return;\n    }\n\n    // Create signup templates\n    await this.createSignupTemplates();\n\n    const platforms = await this.selectPlatforms();\n\n    for (const platform of platforms) {\n      await this.createPlatformAccount(platform);\n    }\n\n    // Generate final .env file\n    await this.generateEnvFile();\n\n    console.log(`\\n${colors.bright}${colors.green}🎉 ALL ACCOUNTS CREATED AND CONFIGURED!${colors.reset}`);\n    console.log(`${colors.cyan}You can now post to all platforms with:${colors.reset}`);\n    console.log(`${colors.yellow}hyper-post post -c \"Your message\" -t \"Title\" -u \"https://link.com\"${colors.reset}`);\n\n    this.rl.close();\n    this.isRunning = false;\n  }\n\n  private async createSignupTemplates(): Promise<void> {\n    console.log(`${colors.bright}${colors.magenta}📝 SIGNUP TEMPLATES${colors.reset}`);\n    console.log(`${colors.dim}════════════════════${colors.reset}`);\n\n    const existingTemplates = this.signupManager.getAllTemplates();\n    const defaultTemplate = this.signupManager.getDefaultTemplate();\n\n    if (Object.keys(existingTemplates).length > 0) {\n      console.log(`${colors.blue}Found existing signup templates:${colors.reset}`);\n      Object.entries(existingTemplates).forEach(([platform, template]) => {\n        console.log(`  ${colors.green}•${colors.reset} ${platform}: ${template.displayName} (${template.email})`);\n      });\n\n      const reuse = await this.askYesNo('\\nReuse existing template for new platforms?');\n      if (reuse) {\n        console.log(`${colors.green}✅ Using existing template.${colors.reset}\\n`);\n        return;\n      }\n      console.log(`${colors.yellow}📝 Creating new template.${colors.reset}\\n`);\n    }\n\n    console.log(`${colors.cyan}Let's create consistent branding across all platforms.${colors.reset}`);\n    console.log(`${colors.dim}Using HyperDrift as example template...${colors.reset}\\n`);\n\n    // Get account type\n    const accountType = await this.selectAccountType();\n\n    // Basic account info with default values\n    const username = await this.askFieldWithDefault({\n      key: 'username',\n      label: 'Base Username',\n      description: 'Base username (will be adapted per platform)',\n      type: 'text',\n      required: true,\n      defaultValue: defaultTemplate.username,\n      validation: (value: string) => {\n        if (value.length < 2) return 'Username must be at least 2 characters';\n        if (!/^[a-zA-Z0-9_-]+$/.test(value)) return 'Only letters, numbers, hyphens, underscores';\n        return true;\n      }\n    });\n\n    const displayName = await this.askFieldWithDefault({\n      key: 'displayName',\n      label: 'Display Name',\n      description: 'Full name or project name shown publicly',\n      type: 'text',\n      required: true,\n      defaultValue: defaultTemplate.displayName\n    });\n\n    const email = await this.askFieldWithDefault({\n      key: 'email',\n      label: 'Email Address',\n      description: 'Primary email for accounts (can vary per platform)',\n      type: 'email',\n      required: true,\n      defaultValue: defaultTemplate.email\n    });\n\n    // Profile information\n    console.log(`\\n${colors.cyan}📋 Profile Information (consistent across platforms):${colors.reset}`);\n\n    const bio = await this.askFieldWithDefault({\n      key: 'bio',\n      label: 'Bio/Description',\n      description: 'Short description of your project/persona',\n      type: 'textarea',\n      required: true,\n      maxLength: 200,\n      defaultValue: defaultTemplate.bio\n    });\n\n    const website = await this.askFieldWithDefault({\n      key: 'website',\n      label: 'Website URL',\n      description: 'Your main website or project URL',\n      type: 'url',\n      required: true,\n      defaultValue: defaultTemplate.website\n    });\n\n    const location = await this.askFieldWithDefault({\n      key: 'location',\n      label: 'Location',\n      description: 'Location (city, country, or \"Digital Nomad\")',\n      type: 'text',\n      required: false,\n      defaultValue: defaultTemplate.location\n    });\n\n    // Create base template\n    const baseTemplate: SignupTemplate = {\n      username,\n      displayName,\n      email,\n      bio,\n      website,\n      location,\n      accountType,\n      primaryTopics: defaultTemplate.primaryTopics,\n      targetAudience: defaultTemplate.targetAudience\n    };\n\n    // Store template for all platforms (main + difficult)\n    Object.keys(ALL_PLATFORM_SIGNUP_REQUIREMENTS).forEach(platform => {\n      this.signupManager.saveTemplate(platform, baseTemplate);\n    });\n\n    console.log(`${colors.green}✅ Signup templates created and saved!${colors.reset}\\n`);\n  }\n\n  private async selectAccountType(): Promise<'personal' | 'business' | 'community' | 'project'> {\n    console.log(`${colors.cyan}What type of account is this?${colors.reset}`);\n    console.log(`${colors.yellow}1.${colors.reset} Personal - Individual developer/streamer`);\n    console.log(`${colors.yellow}2.${colors.reset} Business - Company or startup`);\n    console.log(`${colors.yellow}3.${colors.reset} Community - Group or organization`);\n    console.log(`${colors.yellow}4.${colors.reset} Project - Open source project or tool`);\n\n    while (true) {\n      const choice = await this.askField({\n        key: 'choice',\n        label: 'Account Type (1-4)',\n        description: 'Choose account type',\n        type: 'text',\n        required: true\n      });\n\n      switch (choice) {\n        case '1': return 'personal';\n        case '2': return 'business';\n        case '3': return 'community';\n        case '4': return 'project';\n        default:\n          console.log(`${colors.red}❌ Please choose 1, 2, 3, or 4.${colors.reset}`);\n      }\n    }\n  }\n\n  private async selectPlatforms(): Promise<string[]> {\n    console.log(`${colors.bright}${colors.blue}🎯 SELECT PLATFORMS TO SET UP${colors.reset}`);\n    console.log(`${colors.dim}════════════════════════════${colors.reset}`);\n\n    const configuredPlatforms = this.signupManager.getConfiguredPlatforms();\n    const availablePlatforms = Object.entries(PLATFORM_SIGNUP_REQUIREMENTS);\n\n    console.log(`\\n${colors.cyan}Available platforms:${colors.reset}`);\n    availablePlatforms.forEach(([key, req], index) => {\n      const isConfigured = configuredPlatforms.includes(key);\n      const status = isConfigured ? `${colors.green}[CONFIGURED]${colors.reset}` : `${colors.yellow}[NOT SET UP]${colors.reset}`;\n      console.log(`   ${colors.yellow}${index + 1}.${colors.reset} ${key}: ${req.displayName} ${status}`);\n    });\n\n    if (configuredPlatforms.length > 0) {\n      console.log(`\\n${colors.blue}💡 You can reconfigure existing platforms or add new ones.${colors.reset}`);\n      console.log(`   ${colors.dim}Existing credentials will be updated with new values.${colors.reset}`);\n    }\n\n    console.log(`\\n${colors.cyan}Select platforms by number (comma-separated, e.g., \"1,3,4\"):${colors.reset}`);\n\n    const selection = await this.askField({\n      key: 'platforms',\n      label: 'Platform Numbers',\n      description: 'Comma-separated list of platform numbers',\n      type: 'text',\n      required: true\n    });\n\n    const selectedIndices = selection.split(',').map(s => parseInt(s.trim()) - 1);\n    const selectedPlatforms: string[] = [];\n\n    for (const index of selectedIndices) {\n      if (index >= 0 && index < availablePlatforms.length) {\n        const platformKey = availablePlatforms[index][0];\n        selectedPlatforms.push(platformKey);\n      }\n    }\n\n    if (selectedPlatforms.length === 0) {\n      console.log(`${colors.red}❌ No valid platforms selected. Exiting.${colors.reset}`);\n      process.exit(1);\n    }\n\n    console.log(`\\n${colors.green}✅ Selected platforms: ${selectedPlatforms.join(', ')}${colors.reset}\\n`);\n    return selectedPlatforms;\n  }\n\n  private async createPlatformAccount(platform: string): Promise<void> {\n    const requirements = PLATFORM_SIGNUP_REQUIREMENTS[platform];\n    let template = this.signupManager.getTemplate(platform);\n\n    if (!template) {\n      console.log(`❌ No signup template found for ${requirements.displayName}. Please create templates first.`);\n      return;\n    }\n\n    console.log(`\\n🏗️  Creating ${requirements.displayName} Account`);\n    console.log('='.repeat(50));\n\n    console.log(`\\n📋 ${requirements.displayName} Account Creation Guide:`);\n    console.log('='.repeat(50));\n\n    // Show signup steps\n    console.log('\\n📝 ACCOUNT CREATION STEPS:');\n    requirements.signupSteps.forEach((step, index) => {\n      console.log(`   ${index + 1}. ${step}`);\n    });\n\n    // Fill required fields\n    console.log(`\\n🔑 REQUIRED ACCOUNT INFORMATION:`);\n    for (const field of requirements.requiredFields) {\n      const value = await this.askField(field);\n      template.customFields = template.customFields || {};\n      template.customFields[field.key] = value;\n    }\n\n\n    // Show setup steps\n    console.log(`\\n🔧 POST-CREATION SETUP STEPS:`);\n    requirements.setupSteps.forEach((step, index) => {\n      console.log(`   ${index + 1}. ${step}`);\n    });\n\n    if (requirements.verificationNotes) {\n      console.log(`\\n⚠️  VERIFICATION NOTES:`);\n      console.log(`   ${requirements.verificationNotes}`);\n    }\n\n    console.log(`\\n⏳ Complete the account creation steps above, then:`);\n\n    // Get API credentials\n    console.log(`\\n🔐 API CREDENTIALS (after account setup):`);\n    for (const field of requirements.requiredFields) {\n      if (field.key.includes('Token') || field.key.includes('Secret') || field.key.includes('Password')) {\n        const value = await this.askField({\n          ...field,\n          description: field.description + ' (from account settings after setup)'\n        });\n        template.customFields = template.customFields || {};\n        template.customFields[field.key] = value;\n      }\n    }\n\n    // Save completed account\n    this.signupManager.saveCompletedAccount(platform, template.customFields || {});\n\n    console.log(`✅ ${requirements.displayName} account configured and saved!`);\n  }\n\n  private async askField(field: any): Promise<string> {\n    return new Promise((resolve) => {\n      const isPiped = this.isPipedInput();\n\n      if (!isPiped) {\n        const prompt = field.sensitive ? '(hidden) ' : '';\n        const maxNote = field.maxLength ? ` (max ${field.maxLength} chars)` : '';\n        const requiredNote = field.required ? ' *' : '';\n\n        console.log(`\\n${field.label}${requiredNote}${maxNote}`);\n        if (field.description) {\n          console.log(`   ${field.description}`);\n        }\n        if (field.type === 'select' && field.options) {\n          console.log(`   Options: ${field.options.join(', ')}`);\n        }\n      }\n\n      this.rl.question(isPiped ? '' : '> ', (answer) => {\n        // Validate answer\n        if (!answer && field.required) {\n          if (!isPiped) console.log(`❌ ${field.label} is required.`);\n          resolve(this.askField(field));\n          return;\n        }\n\n        if (answer && field.validation) {\n          const validationResult = field.validation(answer);\n          if (validationResult !== true) {\n            if (!isPiped) console.log(`❌ ${validationResult}`);\n            resolve(this.askField(field));\n            return;\n          }\n        }\n\n        if (answer && field.maxLength && answer.length > field.maxLength) {\n          if (!isPiped) console.log(`❌ Too long! Maximum ${field.maxLength} characters.`);\n          resolve(this.askField(field));\n          return;\n        }\n\n        resolve(answer);\n      });\n    });\n  }\n\n  private async askFieldWithDefault(field: any & { defaultValue?: string }): Promise<string> {\n    return new Promise((resolve) => {\n      const isPiped = this.isPipedInput();\n\n      if (!isPiped) {\n        const prompt = field.sensitive ? '(hidden) ' : '';\n        const maxNote = field.maxLength ? ` (max ${field.maxLength} chars)` : '';\n        const requiredNote = field.required ? ' *' : '';\n        const defaultNote = field.defaultValue ? ` [${colors.green}${field.defaultValue}${colors.reset}]` : '';\n\n        console.log(`\\n${colors.bright}${field.label}${colors.reset}${defaultNote}${requiredNote}${maxNote}`);\n        if (field.description) {\n          console.log(`   ${colors.dim}${field.description}${colors.reset}`);\n        }\n        if (field.type === 'select' && field.options) {\n          console.log(`   Options: ${field.options.join(', ')}`);\n        }\n      }\n\n      this.rl.question(isPiped ? '' : '> ', (answer) => {\n        const finalAnswer = answer.trim() || field.defaultValue || '';\n\n        // Validate answer\n        if (!finalAnswer && field.required) {\n          if (!isPiped) console.log(`${colors.red}❌ ${field.label} is required.${colors.reset}`);\n          resolve(this.askFieldWithDefault(field));\n          return;\n        }\n\n        if (finalAnswer && field.validation) {\n          const validationResult = field.validation(finalAnswer);\n          if (validationResult !== true) {\n            if (!isPiped) console.log(`${colors.red}❌ ${validationResult}${colors.reset}`);\n            resolve(this.askFieldWithDefault(field));\n            return;\n          }\n        }\n\n        if (finalAnswer && field.maxLength && finalAnswer.length > field.maxLength) {\n          if (!isPiped) console.log(`${colors.red}❌ Too long! Maximum ${field.maxLength} characters.${colors.reset}`);\n          resolve(this.askFieldWithDefault(field));\n          return;\n        }\n\n        resolve(finalAnswer);\n      });\n    });\n  }\n\n  private async askYesNo(question: string): Promise<boolean> {\n    return new Promise((resolve) => {\n      const isPiped = this.isPipedInput();\n      this.rl.question(isPiped ? '' : `${question} (y/N): `, (answer) => {\n        resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes');\n      });\n    });\n  }\n\n  private async generateEnvFile(): Promise<void> {\n    const newEnvContent = this.signupManager.exportToEnv();\n\n    // Read existing .env content if it exists\n    let existingContent = '';\n    if (fs.existsSync(this.envPath)) {\n      existingContent = fs.readFileSync(this.envPath, 'utf8');\n    }\n\n    // Merge new content with existing content\n    const mergedContent = this.mergeEnvContent(existingContent, newEnvContent);\n\n    fs.writeFileSync(this.envPath, mergedContent);\n    console.log(`📄 Updated .env file at ${this.envPath} (added new platform credentials)`);\n  }\n\n  private mergeEnvContent(existing: string, newContent: string): string {\n    const existingLines = existing.split('\\n').filter(line => line.trim());\n    const newLines = newContent.split('\\n').filter(line => line.trim());\n\n    // Create a map of existing environment variables\n    const existingVars = new Map<string, string>();\n    const existingComments: string[] = [];\n\n    for (const line of existingLines) {\n      if (line.startsWith('#')) {\n        existingComments.push(line);\n      } else if (line.includes('=')) {\n        const [key, ...valueParts] = line.split('=');\n        existingVars.set(key.trim(), valueParts.join('=').trim());\n      }\n    }\n\n    // Merge new variables (new ones override existing ones for the same platform)\n    for (const line of newLines) {\n      if (!line.startsWith('#') && line.includes('=')) {\n        const [key, ...valueParts] = line.split('=');\n        existingVars.set(key.trim(), valueParts.join('=').trim());\n      }\n    }\n\n    // Reconstruct the file with comments at the top, then all variables\n    const result: string[] = [];\n\n    // Add header comment\n    result.push('# HyperPost Configuration');\n    result.push('# Generated and updated by setup wizard');\n    result.push('# Genuine accounts with complete profiles');\n    result.push('');\n\n    // Group variables by platform\n    const platformGroups: Record<string, string[]> = {};\n    const otherVars: string[] = [];\n\n    for (const [key, value] of existingVars) {\n      const platformMatch = key.match(/^([A-Z]+)_/);\n      if (platformMatch) {\n        const platform = platformMatch[1].toLowerCase();\n        if (!platformGroups[platform]) {\n          platformGroups[platform] = [];\n        }\n        platformGroups[platform].push(`${key}=${value}`);\n      } else {\n        otherVars.push(`${key}=${value}`);\n      }\n    }\n\n    // Add platform sections\n    const platformOrder = ['mastodon', 'bluesky', 'reddit', 'discord'];\n    for (const platform of platformOrder) {\n      if (platformGroups[platform]) {\n        result.push(`# ========================================`);\n        result.push(`# ${platform.toUpperCase()}`);\n        result.push(`# ========================================`);\n        result.push(...platformGroups[platform]);\n        result.push('');\n      }\n    }\n\n    // Add any remaining variables\n    if (otherVars.length > 0) {\n      result.push('# ========================================');\n      result.push('# OTHER SETTINGS');\n      result.push('# ========================================');\n      result.push(...otherVars);\n      result.push('');\n    }\n\n    return result.join('\\n');\n  }\n}\n\nexport { HyperPostSetup };\n","// Signup templates for creating genuine social media accounts\n// These templates ensure consistent branding and professional presentation\n\nexport interface SignupTemplate {\n  // Basic account info\n  username: string;\n  displayName: string;\n  email: string;\n\n  // Profile information\n  bio?: string;\n  description?: string;\n  website?: string;\n  location?: string;\n\n  // Social/branding\n  avatarUrl?: string;\n  bannerUrl?: string;\n  themeColor?: string;\n\n  // Platform-specific fields\n  customFields?: Record<string, any>;\n\n  // Account purpose/goals\n  accountType: 'personal' | 'business' | 'community' | 'project';\n  primaryTopics: string[];\n  targetAudience: string;\n}\n\nexport const DEFAULT_SIGNUP_TEMPLATE: SignupTemplate = {\n  username: 'hyperdrift',\n  displayName: 'HyperDrift',\n  email: 'yann@hyperdrift.io',\n  bio: 'Building the future of software development. Open-source tools for independent developers and communities. #Web3 #OpenSource #DeveloperTools',\n  description: 'HyperDrift is an ecosystem of small but focused apps, tools, and thoughts. We build software that solves real problems, shares ideas openly, and puts developers first.',\n  website: 'https://hyperdrift.io',\n  location: 'Digital Nomad',\n  accountType: 'project',\n  primaryTopics: ['web3', 'opensource', 'developer-tools', 'productivity', 'community'],\n  targetAudience: 'Independent developers, open-source contributors, and communities building the future of software'\n};\n\n// Platform-specific signup requirements and templates\nexport interface PlatformSignupRequirements {\n  platform: string;\n  displayName: string;\n\n  // Required fields for account creation\n  requiredFields: {\n    key: string;\n    label: string;\n    type: 'text' | 'email' | 'password' | 'url' | 'textarea' | 'select';\n    description: string;\n    validation?: (value: string) => boolean | string;\n    options?: string[]; // for select fields\n  }[];\n\n  // Optional profile enhancement fields\n  profileFields: {\n    key: string;\n    label: string;\n    type: 'text' | 'textarea' | 'url' | 'file';\n    description: string;\n    maxLength?: number;\n    recommended?: boolean;\n  }[];\n\n  // Platform-specific signup instructions\n  signupSteps: string[];\n\n  // Post-creation setup steps\n  setupSteps: string[];\n\n  // Verification requirements\n  verificationNotes?: string;\n}\n\n// Main supported platforms - these are shown in the setup wizard\nexport const PLATFORM_SIGNUP_REQUIREMENTS: Record<string, PlatformSignupRequirements> = {\n  mastodon: {\n    platform: 'mastodon',\n    displayName: 'Mastodon',\n    requiredFields: [\n      {\n        key: 'instance',\n        label: 'Mastodon Instance',\n        type: 'url',\n        description: 'Your Mastodon server (e.g., mastodon.social, fosstodon.org)',\n        validation: (value) => {\n          if (!value.includes('.')) return 'Must be a valid domain';\n          if (!value.startsWith('http')) value = 'https://' + value;\n          return true;\n        }\n      },\n      {\n        key: 'username',\n        label: 'Username',\n        type: 'text',\n        description: 'Choose a unique username for this instance',\n        validation: (value) => {\n          if (value.length < 1) return 'Username is required';\n          if (value.length > 30) return 'Username must be 30 characters or less';\n          if (!/^[a-zA-Z0-9_]+$/.test(value)) return 'Only letters, numbers, and underscores allowed';\n          return true;\n        }\n      },\n      {\n        key: 'email',\n        label: 'Email Address',\n        type: 'email',\n        description: 'Email for account verification and recovery',\n        validation: (value) => {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          return emailRegex.test(value) || 'Must be a valid email address';\n        }\n      },\n      {\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        description: 'Strong password for your account',\n        validation: (value) => {\n          if (value.length < 8) return 'Password must be at least 8 characters';\n          return true;\n        }\n      }\n    ],\n    profileFields: [\n      {\n        key: 'displayName',\n        label: 'Display Name',\n        type: 'text',\n        description: 'How others will see you (can include spaces and special characters)',\n        maxLength: 30,\n        recommended: true\n      },\n      {\n        key: 'bio',\n        label: 'Bio',\n        type: 'textarea',\n        description: 'Short description of yourself or your project',\n        maxLength: 500,\n        recommended: true\n      },\n      {\n        key: 'website',\n        label: 'Website',\n        type: 'url',\n        description: 'Link to your website or project',\n        recommended: true\n      },\n      {\n        key: 'location',\n        label: 'Location',\n        type: 'text',\n        description: 'Where you\\'re based (city, country, or \"Digital Nomad\")',\n        maxLength: 30,\n        recommended: false\n      },\n      {\n        key: 'avatar',\n        label: 'Profile Picture',\n        type: 'file',\n        description: 'Square image, minimum 400x400px',\n        recommended: true\n      },\n      {\n        key: 'header',\n        label: 'Header Image',\n        type: 'file',\n        description: 'Banner image, 1500x500px recommended',\n        recommended: false\n      }\n    ],\n    signupSteps: [\n      '1. Choose a Mastodon instance (server) - we recommend mastodon.social for beginners',\n      '2. Visit the instance website and click \"Create account\"',\n      '3. Accept the server rules',\n      '4. Fill in your chosen username, email, and password',\n      '5. Complete any CAPTCHA if required',\n      '6. Check your email and click the verification link'\n    ],\n    setupSteps: [\n      '1. Complete your profile with bio, website, and images',\n      '2. Go to Preferences → Development → New application',\n      '3. Name: \"HyperPost\", Scopes: read + write',\n      '4. Copy the access token to your .env file'\n    ],\n    verificationNotes: 'Mastodon accounts are verified through email confirmation. Some instances may require additional verification.'\n  },\n\n  bluesky: {\n    platform: 'bluesky',\n    displayName: 'Bluesky',\n    requiredFields: [\n      {\n        key: 'email',\n        label: 'Email Address',\n        type: 'email',\n        description: 'Email for account creation and verification',\n        validation: (value) => {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          return emailRegex.test(value) || 'Must be a valid email address';\n        }\n      },\n      {\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        description: 'Strong password for your account',\n        validation: (value) => {\n          if (value.length < 8) return 'Password must be at least 8 characters';\n          return true;\n        }\n      },\n      {\n        key: 'username',\n        label: 'Username/Handle',\n        type: 'text',\n        description: 'Choose a unique handle (will become @handle.bsky.social)',\n        validation: (value) => {\n          if (value.length < 3) return 'Handle must be at least 3 characters';\n          if (value.length > 18) return 'Handle must be 18 characters or less';\n          if (!/^[a-zA-Z0-9_-]+$/.test(value)) return 'Only letters, numbers, hyphens, and underscores allowed';\n          return true;\n        }\n      }\n    ],\n    profileFields: [\n      {\n        key: 'displayName',\n        label: 'Display Name',\n        type: 'text',\n        description: 'Your full name or project name',\n        maxLength: 64,\n        recommended: true\n      },\n      {\n        key: 'description',\n        label: 'Bio/Description',\n        type: 'textarea',\n        description: 'Tell people about yourself or your project',\n        maxLength: 256,\n        recommended: true\n      },\n      {\n        key: 'website',\n        label: 'Website',\n        type: 'url',\n        description: 'Link to your website or project',\n        recommended: true\n      },\n      {\n        key: 'avatar',\n        label: 'Profile Picture',\n        type: 'file',\n        description: 'Square image, will be cropped to circle',\n        recommended: true\n      },\n      {\n        key: 'banner',\n        label: 'Banner Image',\n        type: 'file',\n        description: 'Header image for your profile',\n        recommended: false\n      }\n    ],\n    signupSteps: [\n      '1. Go to https://bsky.app and click \"Create account\"',\n      '2. Enter your email address',\n      '3. Create a strong password',\n      '4. Choose your birth date (must be 16+ to use Bluesky)',\n      '5. Choose your unique handle/username',\n      '6. Complete the CAPTCHA challenge',\n      '7. Check your email and click the verification link'\n    ],\n    setupSteps: [\n      '1. Complete your profile with bio, website, and images',\n      '2. Go to Settings → Privacy and security → App passwords',\n      '3. Click \"Add App Password\"',\n      '4. Name: \"HyperPost\"',\n      '5. Copy the generated app password to your .env file'\n    ],\n    verificationNotes: 'Bluesky requires email verification. Accounts must be 16+ years old. App passwords are required for API access (not your main password).'\n  },\n\n  devto: {\n    platform: 'devto',\n    displayName: 'Dev.to',\n    requiredFields: [\n      {\n        key: 'apiKey',\n        label: 'API Key',\n        type: 'password',\n        description: 'API key from Dev.to settings',\n        validation: (value) => {\n          if (value.length < 10) return 'API key appears too short';\n          return true;\n        }\n      }\n    ],\n    profileFields: [\n      {\n        key: 'username',\n        label: 'Username',\n        type: 'text',\n        description: 'Your Dev.to username',\n        required: true\n      },\n      {\n        key: 'name',\n        label: 'Display Name',\n        type: 'text',\n        description: 'Your full name',\n        required: true\n      },\n      {\n        key: 'summary',\n        label: 'Bio/Summary',\n        type: 'textarea',\n        description: 'Short bio (160 characters max)',\n        required: false\n      },\n      {\n        key: 'location',\n        label: 'Location',\n        type: 'text',\n        description: 'Your location',\n        required: false\n      },\n      {\n        key: 'website_url',\n        label: 'Website',\n        type: 'url',\n        description: 'Your website URL',\n        required: false\n      }\n    ],\n    signupSteps: [\n      '1. Go to https://dev.to/settings',\n      '2. Look for \"Account\", \"Extensions\", or \"Integrations\" tab',\n      '3. Find the \"DEV Community API Keys\" section',\n      '4. Click the \"Generate API Key\" button',\n      '5. Enter a name like \"HyperPost\" and click generate',\n      '6. Copy the generated API key immediately (it won\\'t be shown again)',\n      '7. Add DEVTO_API_KEY=your_key_here to your .env file'\n    ],\n    verificationNotes: 'Dev.to API keys are available to all verified accounts. If you don\\'t see the API Keys section, try refreshing the page or check if your account needs additional verification. API keys are generated instantly once the section is visible.'\n  },\n\n  medium: {\n    platform: 'medium',\n    displayName: 'Medium',\n    requiredFields: [\n      {\n        key: 'integrationToken',\n        label: 'Integration Token',\n        type: 'password',\n        description: 'Integration token from Medium settings',\n        validation: (value) => {\n          if (value.length < 20) return 'Integration token appears too short';\n          return true;\n        }\n      }\n    ],\n    profileFields: [\n      {\n        key: 'name',\n        label: 'Display Name',\n        type: 'text',\n        description: 'Your display name on Medium',\n        required: true\n      },\n      {\n        key: 'bio',\n        label: 'Bio',\n        type: 'textarea',\n        description: 'Short bio/about section',\n        required: false\n      },\n      {\n        key: 'url',\n        label: 'Website URL',\n        type: 'url',\n        description: 'Your personal website',\n        required: false\n      }\n    ],\n    signupSteps: [\n      '1. Go to https://medium.com/me/settings',\n      '2. Scroll down to \"Integration tokens\"',\n      '3. Click \"Get integration token\"',\n      '4. Name it \"HyperPost\" and create',\n      '5. Copy the token to your .env file as MEDIUM_TOKEN'\n    ],\n    verificationNotes: 'Medium integration tokens are created instantly. Requires a Medium account.'\n  }\n\n}\n\n// Difficult/advanced platforms - NOT shown in setup wizard\n// These require significant setup effort or have complex APIs\nexport const DIFFICULT_PLATFORM_SIGNUP_REQUIREMENTS: Record<string, PlatformSignupRequirements> = {\n  discord: {\n    platform: 'discord',\n    displayName: 'Discord',\n    requiredFields: [\n      {\n        key: 'email',\n        label: 'Email Address',\n        type: 'email',\n        description: 'Email for account creation',\n        validation: (value) => {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          return emailRegex.test(value) || 'Must be a valid email address';\n        }\n      },\n      {\n        key: 'username',\n        label: 'Username',\n        type: 'text',\n        description: 'Choose a unique username',\n        validation: (value) => {\n          if (value.length < 2) return 'Username must be at least 2 characters';\n          if (value.length > 32) return 'Username must be 32 characters or less';\n          if (!/^[a-zA-Z0-9_-]+$/.test(value)) return 'Only letters, numbers, hyphens, and underscores allowed';\n          return true;\n        }\n      },\n      {\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        description: 'Strong password for your account',\n        validation: (value) => {\n          if (value.length < 8) return 'Password must be at least 8 characters';\n          return true;\n        }\n      }\n    ],\n    profileFields: [\n      {\n        key: 'displayName',\n        label: 'Display Name',\n        type: 'text',\n        description: 'Your display name (can include spaces and special characters)',\n        maxLength: 32,\n        recommended: true\n      },\n      {\n        key: 'bio',\n        label: 'About Me/Bio',\n        type: 'textarea',\n        description: 'Tell people about yourself or your project',\n        maxLength: 190,\n        recommended: true\n      },\n      {\n        key: 'avatar',\n        label: 'Profile Picture',\n        type: 'file',\n        description: 'Profile picture (will be cropped to circle)',\n        recommended: true\n      },\n      {\n        key: 'banner',\n        label: 'Profile Banner',\n        type: 'file',\n        description: 'Banner image for your profile',\n        recommended: false\n      }\n    ],\n    signupSteps: [\n      '1. Go to https://discord.com/register',\n      '2. Enter your email address',\n      '3. Choose a unique username',\n      '4. Create a strong password',\n      '5. Enter your date of birth (must be 13+ to use Discord)',\n      '6. Complete any CAPTCHA if required',\n      '7. Check your email and verify your account'\n    ],\n    setupSteps: [\n      '1. Complete your profile with bio and images',\n      '2. Go to https://discord.com/developers/applications',\n      '3. Click \"New Application\"',\n      '4. Name: \"HyperPost Bot\"',\n      '5. Go to \"Bot\" section and click \"Add Bot\"',\n      '6. Copy the bot token to your .env file',\n      '7. Get a channel ID from your server (right-click channel → Copy ID)'\n    ],\n    verificationNotes: 'Discord requires email verification and accounts must be 13+. Bot tokens are separate from user accounts and require a bot application. You need a server and channel to post to. Discord has rate limits on bot posting.'\n  },\n\n  reddit: {\n    platform: 'reddit',\n    displayName: 'Reddit',\n    requiredFields: [\n      {\n        key: 'username',\n        label: 'Username',\n        type: 'text',\n        description: 'Choose a unique Reddit username',\n        validation: (value) => {\n          if (value.length < 3) return 'Username must be at least 3 characters';\n          if (value.length > 20) return 'Username must be 20 characters or less';\n          if (!/^[a-zA-Z0-9_-]+$/.test(value)) return 'Only letters, numbers, hyphens, and underscores allowed';\n          return true;\n        }\n      },\n      {\n        key: 'email',\n        label: 'Email Address',\n        type: 'email',\n        description: 'Email for account verification',\n        validation: (value) => {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          return emailRegex.test(value) || 'Must be a valid email address';\n        }\n      },\n      {\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        description: 'Strong password for your account',\n        validation: (value) => {\n          if (value.length < 8) return 'Password must be at least 8 characters';\n          return true;\n        }\n      }\n    ],\n    profileFields: [\n      {\n        key: 'displayName',\n        label: 'Display Name',\n        type: 'text',\n        description: 'Your display name (optional, can be changed later)',\n        maxLength: 30,\n        recommended: false\n      },\n      {\n        key: 'bio',\n        label: 'About/Description',\n        type: 'textarea',\n        description: 'Tell the Reddit community about yourself',\n        maxLength: 200,\n        recommended: true\n      },\n      {\n        key: 'website',\n        label: 'Website',\n        type: 'url',\n        description: 'Link to your website or project',\n        recommended: true\n      },\n      {\n        key: 'avatar',\n        label: 'Profile Picture',\n        type: 'file',\n        description: 'Square image, will be displayed on your profile',\n        recommended: true\n      },\n      {\n        key: 'banner',\n        label: 'Profile Banner',\n        type: 'file',\n        description: 'Banner image for your profile',\n        recommended: false\n      },\n      {\n        key: 'location',\n        label: 'Location',\n        type: 'text',\n        description: 'Where you\\'re from or based',\n        maxLength: 100,\n        recommended: false\n      }\n    ],\n    signupSteps: [\n      '1. Go to https://www.reddit.com/register/',\n      '2. Choose a unique username',\n      '3. Enter your email address',\n      '4. Create a strong password',\n      '5. Complete any CAPTCHA if required',\n      '6. Check your email and verify your account'\n    ],\n    setupSteps: [\n      '1. Complete your profile with bio, website, and images',\n      '2. Go to https://www.reddit.com/prefs/apps/',\n      '3. Click \"Create App\" or \"Create Another App\"',\n      '4. Type: \"script\", Name: \"HyperPost\", Description: \"Multi-platform posting\"',\n      '5. Redirect URI: \"http://localhost:8080\"',\n      '6. Copy the client_id and secret to your .env file'\n    ],\n    verificationNotes: 'Reddit requires email verification. You must create an app in preferences to get API credentials. Reddit has strict API rate limits and requires OAuth for posting. Network connectivity issues may prevent API access.'\n  },\n\n  twitter: {\n    platform: 'twitter',\n    displayName: 'Twitter/X',\n    requiredFields: [\n      {\n        key: 'apiKey',\n        label: 'API Key',\n        type: 'password',\n        description: 'Twitter API Key from developer portal',\n        validation: (value) => {\n          if (value.length < 20) return 'API Key should be longer';\n          return true;\n        }\n      },\n      {\n        key: 'apiSecret',\n        label: 'API Secret',\n        type: 'password',\n        description: 'Twitter API Secret from developer portal',\n        validation: (value) => {\n          if (value.length < 40) return 'API Secret should be longer';\n          return true;\n        }\n      },\n      {\n        key: 'accessToken',\n        label: 'Access Token',\n        type: 'password',\n        description: 'Twitter Access Token from developer portal',\n        validation: (value) => {\n          if (value.length < 40) return 'Access Token should be longer';\n          return true;\n        }\n      },\n      {\n        key: 'accessTokenSecret',\n        label: 'Access Token Secret',\n        type: 'password',\n        description: 'Twitter Access Token Secret from developer portal',\n        validation: (value) => {\n          if (value.length < 40) return 'Access Token Secret should be longer';\n          return true;\n        }\n      }\n    ],\n    profileFields: [\n      {\n        key: 'displayName',\n        label: 'Display Name',\n        type: 'text',\n        description: 'Your display name on Twitter',\n        maxLength: 50,\n        recommended: true\n      },\n      {\n        key: 'bio',\n        label: 'Bio',\n        type: 'textarea',\n        description: 'Your Twitter bio',\n        maxLength: 160,\n        recommended: true\n      },\n      {\n        key: 'website',\n        label: 'Website',\n        type: 'url',\n        description: 'Link to your website',\n        recommended: true\n      },\n      {\n        key: 'location',\n        label: 'Location',\n        type: 'text',\n        description: 'Your location',\n        maxLength: 30,\n        recommended: false\n      },\n      {\n        key: 'avatar',\n        label: 'Profile Picture',\n        type: 'file',\n        description: 'Profile picture (will be cropped to circle)',\n        recommended: true\n      },\n      {\n        key: 'banner',\n        label: 'Header Image',\n        type: 'file',\n        description: 'Header/banner image for your profile',\n        recommended: false\n      }\n    ],\n    signupSteps: [\n      '1. Apply for Twitter Developer Account at https://developer.twitter.com/',\n      '2. Wait for approval (can take days/weeks)',\n      '3. Create a new app in the developer portal',\n      '4. Generate API keys and access tokens',\n      '5. Set up OAuth 1.0a authentication'\n    ],\n    setupSteps: [\n      '1. Complete your Twitter profile with bio, website, and images',\n      '2. In developer portal, go to your app settings',\n      '3. Generate API Key, API Secret, Access Token, and Access Token Secret',\n      '4. Ensure your app has write permissions',\n      '5. Test API connectivity before using'\n    ],\n    verificationNotes: 'Twitter/X requires developer account approval which can take significant time. API access is restricted and requires OAuth 1.0a. Twitter has strict rate limits and API changes frequently. Not recommended for casual use.'\n  }\n};\n\n// All platforms (main + difficult) for internal use\nexport const ALL_PLATFORM_SIGNUP_REQUIREMENTS = {\n  ...PLATFORM_SIGNUP_REQUIREMENTS,\n  ...DIFFICULT_PLATFORM_SIGNUP_REQUIREMENTS\n};\n\n// Function to get a signup template for a platform\nexport function getSignupTemplate(platform: string): SignupTemplate {\n  const requirements = PLATFORM_SIGNUP_REQUIREMENTS[platform];\n  if (!requirements) {\n    throw new Error(`No signup template available for platform: ${platform}`);\n  }\n\n  // Create a template based on the platform requirements\n  const template: SignupTemplate = {\n    ...DEFAULT_SIGNUP_TEMPLATE,\n    username: DEFAULT_SIGNUP_TEMPLATE.username,\n    displayName: DEFAULT_SIGNUP_TEMPLATE.displayName,\n    email: DEFAULT_SIGNUP_TEMPLATE.email\n  };\n\n  return template;\n}\n\n// Function to validate a signup template for a platform\nexport function validateSignupTemplate(platform: string, template: SignupTemplate): { valid: boolean; errors: string[] } {\n  const requirements = PLATFORM_SIGNUP_REQUIREMENTS[platform];\n  if (!requirements) {\n    return { valid: false, errors: [`Unknown platform: ${platform}`] };\n  }\n\n  const errors: string[] = [];\n\n  // Check required fields\n  for (const field of requirements.requiredFields) {\n    const value = template[field.key as keyof SignupTemplate] as string;\n    if (!value) {\n      errors.push(`Missing required field: ${field.label}`);\n    } else if (field.validation) {\n      const validationResult = field.validation(value);\n      if (validationResult !== true) {\n        errors.push(`${field.label}: ${validationResult}`);\n      }\n    }\n  }\n\n  // Check profile field lengths\n  for (const field of requirements.profileFields) {\n    const value = template[field.key as keyof SignupTemplate] as string;\n    if (value && field.maxLength && value.length > field.maxLength) {\n      errors.push(`${field.label} exceeds maximum length of ${field.maxLength} characters`);\n    }\n  }\n\n  return { valid: errors.length === 0, errors };\n}\n","import * as fs from 'fs';\nimport * as path from 'path';\nimport { SignupTemplate, PLATFORM_SIGNUP_REQUIREMENTS } from './signup-templates';\n\nexport interface PersistedSignupData {\n  version: string;\n  templates: Record<string, SignupTemplate>;\n  completedAccounts: Record<string, any>;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Default template configuration - loaded from .hyperpost-config.json\nconst DEFAULT_CONFIG_FILE = '.hyperpost-config.json';\n\ninterface HyperPostConfig {\n  defaultTemplate: SignupTemplate;\n}\n\n// Fallback default template if config file doesn't exist\nconst FALLBACK_DEFAULT_TEMPLATE: SignupTemplate = {\n  username: 'hyperdrift',\n  displayName: 'HyperDrift',\n  email: 'yann@hyperdrift.io',\n  bio: 'Building the future of software development. Open-source tools for independent developers and communities. #Web3 #OpenSource #DeveloperTools',\n  description: 'HyperDrift is an ecosystem of small but focused apps, tools, and thoughts. We build software that solves real problems, shares ideas openly, and puts developers first.',\n  website: 'https://hyperdrift.io',\n  location: 'Digital Nomad',\n  accountType: 'project',\n  primaryTopics: ['web3', 'opensource', 'developer-tools', 'productivity', 'community'],\n  targetAudience: 'Independent developers, open-source contributors, and communities building the future of software'\n};\n\nexport class SignupManager {\n  private dataPath: string;\n  private data: PersistedSignupData;\n  private configPath: string;\n  private config: HyperPostConfig;\n\n  constructor() {\n    this.dataPath = path.join(process.cwd(), '.hyperpost-signup.json');\n    this.configPath = path.join(process.cwd(), DEFAULT_CONFIG_FILE);\n    this.loadData();\n    this.loadConfig();\n  }\n\n  private loadData(): void {\n    try {\n      if (fs.existsSync(this.dataPath)) {\n        const content = fs.readFileSync(this.dataPath, 'utf8');\n        this.data = JSON.parse(content);\n        // Validate version compatibility\n        if (this.data.version !== '1.0') {\n          console.warn('Signup data version mismatch, resetting...');\n          this.initializeData();\n        }\n      } else {\n        this.initializeData();\n      }\n    } catch (error) {\n      console.warn('Failed to load signup data, initializing new data...');\n      this.initializeData();\n    }\n  }\n\n  private initializeData(): void {\n    this.data = {\n      version: '1.0',\n      templates: {},\n      completedAccounts: {},\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n  }\n\n  private loadConfig(): void {\n    try {\n      if (fs.existsSync(this.configPath)) {\n        const content = fs.readFileSync(this.configPath, 'utf8');\n        this.config = JSON.parse(content);\n      } else {\n        // Create default config file\n        this.config = { defaultTemplate: FALLBACK_DEFAULT_TEMPLATE };\n        this.saveConfig();\n      }\n    } catch (error) {\n      console.error('Error loading config:', error);\n      this.config = { defaultTemplate: FALLBACK_DEFAULT_TEMPLATE };\n    }\n  }\n\n  private saveConfig(): void {\n    try {\n      fs.writeFileSync(this.configPath, JSON.stringify(this.config, null, 2), 'utf8');\n    } catch (error) {\n      console.error('Error saving config:', error);\n    }\n  }\n\n  private saveData(): void {\n    this.data.updatedAt = new Date().toISOString();\n    fs.writeFileSync(this.dataPath, JSON.stringify(this.data, null, 2));\n  }\n\n  // Template management\n  hasTemplate(platform?: string): boolean {\n    if (platform) {\n      return !!this.data.templates[platform];\n    }\n    return Object.keys(this.data.templates).length > 0;\n  }\n\n  getTemplate(platform: string): SignupTemplate | null {\n    return this.data.templates[platform] || null;\n  }\n\n  getAllTemplates(): Record<string, SignupTemplate> {\n    return { ...this.data.templates };\n  }\n\n  saveTemplate(platform: string, template: SignupTemplate): void {\n    this.data.templates[platform] = { ...template };\n    this.saveData();\n  }\n\n  // Account management\n  hasCompletedAccount(platform: string): boolean {\n    return !!this.data.completedAccounts[platform];\n  }\n\n  getCompletedAccount(platform: string): any {\n    return this.data.completedAccounts[platform] || null;\n  }\n\n  saveCompletedAccount(platform: string, credentials: any): void {\n    this.data.completedAccounts[platform] = {\n      ...credentials,\n      createdAt: new Date().toISOString()\n    };\n    this.saveData();\n  }\n\n  getAllCompletedAccounts(): Record<string, any> {\n    return { ...this.data.completedAccounts };\n  }\n\n  // Utility methods\n  getConfiguredPlatforms(): string[] {\n    return Object.keys(this.data.completedAccounts);\n  }\n\n  getAvailablePlatforms(): string[] {\n    return Object.keys(PLATFORM_SIGNUP_REQUIREMENTS);\n  }\n\n  resetPlatform(platform: string): void {\n    delete this.data.templates[platform];\n    delete this.data.completedAccounts[platform];\n    this.saveData();\n  }\n\n  // Get default template for examples\n  getDefaultTemplate(): SignupTemplate {\n    return { ...this.config.defaultTemplate };\n  }\n\n  // Initialize with default template if no templates exist\n  ensureDefaultTemplate(): void {\n    if (!this.hasTemplate()) {\n      console.log('💡 No templates found. Using default template as example...');\n      // Don't save it automatically, just use as reference\n    }\n  }\n\n  // Update the default template configuration\n  updateDefaultTemplate(template: SignupTemplate): void {\n    this.config.defaultTemplate = { ...template };\n    this.saveConfig();\n  }\n\n  exportToEnv(): string {\n    let envContent = '# HyperPost Configuration\\n';\n    envContent += `# Generated from signup templates on ${new Date().toISOString()}\\n\\n`;\n\n    for (const [platform, credentials] of Object.entries(this.data.completedAccounts)) {\n      const requirements = PLATFORM_SIGNUP_REQUIREMENTS[platform];\n      if (!requirements) continue;\n\n      envContent += `# ========================================\\n`;\n      envContent += `# ${requirements.displayName}\\n`;\n      envContent += `# ========================================\\n`;\n\n      const template = this.data.templates[platform];\n      if (template) {\n        envContent += `# Account: ${template.displayName} (${template.username})\\n`;\n        envContent += `# Email: ${template.email}\\n`;\n        if (template.bio) envContent += `# Bio: ${template.bio}\\n`;\n        if (template.website) envContent += `# Website: ${template.website}\\n`;\n        if (template.location) envContent += `# Location: ${template.location}\\n`;\n      }\n\n      // Add API credentials\n      for (const [key, value] of Object.entries(credentials)) {\n        if (key !== 'createdAt') {\n          const envKey = `${platform.toUpperCase()}_${key.toUpperCase()}`;\n          envContent += `${envKey}=${value}\\n`;\n        }\n      }\n\n      envContent += '\\n';\n    }\n\n    return envContent;\n  }\n}\n"],"mappings":"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","names":["fs","path"]}