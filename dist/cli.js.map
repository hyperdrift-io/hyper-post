{"version":3,"sources":["../src/database.ts","../src/signup-templates.ts","../src/signup-manager.ts","../src/setup.ts","../src/cli.ts","../src/platforms/BasePlatform.ts","../src/platforms/MastodonPlatform.ts","../src/platforms/BlueskyPlatform.ts","../src/platforms/DiscordPlatform.ts","../src/platforms/RedditPlatform.ts","../src/platforms/DevtoPlatform.ts","../src/platforms/MediumPlatform.ts","../src/HyperPost.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: ['error', 'warn'],\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n","// Signup templates for creating genuine social media accounts\n// These templates ensure consistent branding and professional presentation\n\nexport interface SignupTemplate {\n  // Basic account info\n  username: string;\n  displayName: string;\n  email: string;\n\n  // Profile information\n  bio?: string;\n  description?: string;\n  website?: string;\n  location?: string;\n\n  // Social/branding\n  avatarUrl?: string;\n  bannerUrl?: string;\n  themeColor?: string;\n\n  // Platform-specific fields\n  customFields?: Record<string, any>;\n\n  // Account purpose/goals\n  accountType: 'personal' | 'business' | 'community' | 'project';\n  primaryTopics: string[];\n  targetAudience: string;\n}\n\nexport const DEFAULT_SIGNUP_TEMPLATE: SignupTemplate = {\n  username: 'hyperdrift',\n  displayName: 'HyperDrift',\n  email: 'yann@hyperdrift.io',\n  bio: 'Building the future of software development. Open-source tools for independent developers and communities. #Web3 #OpenSource #DeveloperTools',\n  description: 'HyperDrift is an ecosystem of small but focused apps, tools, and thoughts. We build software that solves real problems, shares ideas openly, and puts developers first.',\n  website: 'https://hyperdrift.io',\n  location: 'Digital Nomad',\n  accountType: 'project',\n  primaryTopics: ['web3', 'opensource', 'developer-tools', 'productivity', 'community'],\n  targetAudience: 'Independent developers, open-source contributors, and communities building the future of software'\n};\n\n// Platform-specific signup requirements and templates\nexport interface PlatformSignupRequirements {\n  platform: string;\n  displayName: string;\n\n  // Required fields for account creation\n  requiredFields: {\n    key: string;\n    label: string;\n    type: 'text' | 'email' | 'password' | 'url' | 'textarea' | 'select';\n    description: string;\n    validation?: (value: string) => boolean | string;\n    options?: string[]; // for select fields\n  }[];\n\n  // Optional profile enhancement fields\n  profileFields: {\n    key: string;\n    label: string;\n    type: 'text' | 'textarea' | 'url' | 'file';\n    description: string;\n    maxLength?: number;\n    recommended?: boolean;\n    required?: boolean;\n  }[];\n\n  // Platform-specific signup instructions\n  signupSteps: string[];\n\n  // Post-creation setup steps\n  setupSteps: string[];\n\n  // Verification requirements\n  verificationNotes?: string;\n}\n\n// Main supported platforms - these are shown in the setup wizard\nexport const PLATFORM_SIGNUP_REQUIREMENTS: Record<string, PlatformSignupRequirements> = {\n  mastodon: {\n    platform: 'mastodon',\n    displayName: 'Mastodon',\n    requiredFields: [\n      {\n        key: 'instance',\n        label: 'Mastodon Instance',\n        type: 'url',\n        description: 'Your Mastodon server (e.g., mastodon.social, fosstodon.org)',\n        validation: (value) => {\n          if (!value.includes('.')) return 'Must be a valid domain';\n          if (!value.startsWith('http')) value = 'https://' + value;\n          return true;\n        }\n      },\n      {\n        key: 'username',\n        label: 'Username',\n        type: 'text',\n        description: 'Choose a unique username for this instance',\n        validation: (value) => {\n          if (value.length < 1) return 'Username is required';\n          if (value.length > 30) return 'Username must be 30 characters or less';\n          if (!/^[a-zA-Z0-9_]+$/.test(value)) return 'Only letters, numbers, and underscores allowed';\n          return true;\n        }\n      },\n      {\n        key: 'email',\n        label: 'Email Address',\n        type: 'email',\n        description: 'Email for account verification and recovery',\n        validation: (value) => {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          return emailRegex.test(value) || 'Must be a valid email address';\n        }\n      },\n      {\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        description: 'Strong password for your account',\n        validation: (value) => {\n          if (value.length < 8) return 'Password must be at least 8 characters';\n          return true;\n        }\n      }\n    ],\n    profileFields: [\n      {\n        key: 'displayName',\n        label: 'Display Name',\n        type: 'text',\n        description: 'How others will see you (can include spaces and special characters)',\n        maxLength: 30,\n        recommended: true\n      },\n      {\n        key: 'bio',\n        label: 'Bio',\n        type: 'textarea',\n        description: 'Short description of yourself or your project',\n        maxLength: 500,\n        recommended: true\n      },\n      {\n        key: 'website',\n        label: 'Website',\n        type: 'url',\n        description: 'Link to your website or project',\n        recommended: true\n      },\n      {\n        key: 'location',\n        label: 'Location',\n        type: 'text',\n        description: 'Where you\\'re based (city, country, or \"Digital Nomad\")',\n        maxLength: 30,\n        recommended: false\n      },\n      {\n        key: 'avatar',\n        label: 'Profile Picture',\n        type: 'file',\n        description: 'Square image, minimum 400x400px',\n        recommended: true\n      },\n      {\n        key: 'header',\n        label: 'Header Image',\n        type: 'file',\n        description: 'Banner image, 1500x500px recommended',\n        recommended: false\n      }\n    ],\n    signupSteps: [\n      '1. Choose a Mastodon instance (server) - we recommend mastodon.social for beginners',\n      '2. Visit the instance website and click \"Create account\"',\n      '3. Accept the server rules',\n      '4. Fill in your chosen username, email, and password',\n      '5. Complete any CAPTCHA if required',\n      '6. Check your email and click the verification link'\n    ],\n    setupSteps: [\n      '1. Complete your profile with bio, website, and images',\n      '2. Go to Preferences → Development → New application',\n      '3. Name: \"HyperPost\", Scopes: read + write',\n      '4. Copy the access token (the setup wizard will collect this)'\n    ],\n    verificationNotes: 'Mastodon accounts are verified through email confirmation. Some instances may require additional verification.'\n  },\n\n  bluesky: {\n    platform: 'bluesky',\n    displayName: 'Bluesky',\n    requiredFields: [\n      {\n        key: 'email',\n        label: 'Email Address',\n        type: 'email',\n        description: 'Email for account creation and verification',\n        validation: (value) => {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          return emailRegex.test(value) || 'Must be a valid email address';\n        }\n      },\n      {\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        description: 'Strong password for your account',\n        validation: (value) => {\n          if (value.length < 8) return 'Password must be at least 8 characters';\n          return true;\n        }\n      },\n      {\n        key: 'username',\n        label: 'Username/Handle',\n        type: 'text',\n        description: 'Choose a unique handle (will become @handle.bsky.social)',\n        validation: (value) => {\n          if (value.length < 3) return 'Handle must be at least 3 characters';\n          if (value.length > 18) return 'Handle must be 18 characters or less';\n          if (!/^[a-zA-Z0-9_-]+$/.test(value)) return 'Only letters, numbers, hyphens, and underscores allowed';\n          return true;\n        }\n      }\n    ],\n    profileFields: [\n      {\n        key: 'displayName',\n        label: 'Display Name',\n        type: 'text',\n        description: 'Your full name or project name',\n        maxLength: 64,\n        recommended: true\n      },\n      {\n        key: 'description',\n        label: 'Bio/Description',\n        type: 'textarea',\n        description: 'Tell people about yourself or your project',\n        maxLength: 256,\n        recommended: true\n      },\n      {\n        key: 'website',\n        label: 'Website',\n        type: 'url',\n        description: 'Link to your website or project',\n        recommended: true\n      },\n      {\n        key: 'avatar',\n        label: 'Profile Picture',\n        type: 'file',\n        description: 'Square image, will be cropped to circle',\n        recommended: true\n      },\n      {\n        key: 'banner',\n        label: 'Banner Image',\n        type: 'file',\n        description: 'Header image for your profile',\n        recommended: false\n      }\n    ],\n    signupSteps: [\n      '1. Go to https://bsky.app and click \"Create account\"',\n      '2. Enter your email address',\n      '3. Create a strong password',\n      '4. Choose your birth date (must be 16+ to use Bluesky)',\n      '5. Choose your unique handle/username',\n      '6. Complete the CAPTCHA challenge',\n      '7. Check your email and click the verification link'\n    ],\n    setupSteps: [\n      '1. Complete your profile with bio, website, and images',\n      '2. Go to Settings → Privacy and security → App passwords',\n      '3. Click \"Add App Password\"',\n      '4. Name: \"HyperPost\"',\n      '5. Copy the generated app password (the setup wizard will collect this)'\n    ],\n    verificationNotes: 'Bluesky requires email verification. Accounts must be 16+ years old. App passwords are required for API access (not your main password).'\n  },\n\n  devto: {\n    platform: 'devto',\n    displayName: 'Dev.to',\n    requiredFields: [\n      {\n        key: 'apiKey',\n        label: 'API Key',\n        type: 'password',\n        description: 'API key from Dev.to settings',\n        validation: (value) => {\n          if (value.length < 10) return 'API key appears too short';\n          return true;\n        }\n      }\n    ],\n    profileFields: [\n      {\n        key: 'username',\n        label: 'Username',\n        type: 'text',\n        description: 'Your Dev.to username',\n        required: true\n      },\n      {\n        key: 'name',\n        label: 'Display Name',\n        type: 'text',\n        description: 'Your full name',\n        required: true\n      },\n      {\n        key: 'summary',\n        label: 'Bio/Summary',\n        type: 'textarea',\n        description: 'Short bio (160 characters max)',\n        required: false\n      },\n      {\n        key: 'location',\n        label: 'Location',\n        type: 'text',\n        description: 'Your location',\n        required: false\n      },\n      {\n        key: 'website_url',\n        label: 'Website',\n        type: 'url',\n        description: 'Your website URL',\n        required: false\n      }\n    ],\n    signupSteps: [\n      '1. Go to https://dev.to/settings',\n      '2. Look for \"Account\", \"Extensions\", or \"Integrations\" tab',\n      '3. Find the \"DEV Community API Keys\" section',\n      '4. Click the \"Generate API Key\" button',\n      '5. Enter a name like \"HyperPost\" and click generate',\n      '6. Copy the generated API key immediately (it won\\'t be shown again)',\n      '7. Copy the API key (the setup wizard will collect this)'\n    ],\n    setupSteps: [],\n    verificationNotes: 'Dev.to API keys are available to all verified accounts. If you don\\'t see the API Keys section, try refreshing the page or check if your account needs additional verification. API keys are generated instantly once the section is visible.'\n  },\n\n  medium: {\n    platform: 'medium',\n    displayName: 'Medium',\n    requiredFields: [\n      {\n        key: 'integrationToken',\n        label: 'Integration Token',\n        type: 'password',\n        description: 'Integration token from Medium settings',\n        validation: (value) => {\n          if (value.length < 20) return 'Integration token appears too short';\n          return true;\n        }\n      }\n    ],\n    profileFields: [\n      {\n        key: 'name',\n        label: 'Display Name',\n        type: 'text',\n        description: 'Your display name on Medium',\n        required: true\n      },\n      {\n        key: 'bio',\n        label: 'Bio',\n        type: 'textarea',\n        description: 'Short bio/about section',\n        required: false\n      },\n      {\n        key: 'url',\n        label: 'Website URL',\n        type: 'url',\n        description: 'Your personal website',\n        required: false\n      }\n    ],\n    signupSteps: [\n      '1. Go to https://medium.com/me/settings',\n      '2. Scroll down to \"Integration tokens\"',\n      '3. Click \"Get integration token\"',\n      '4. Name it \"HyperPost\" and create',\n      '5. Copy the integration token (the setup wizard will collect this)'\n    ],\n    setupSteps: [],\n    verificationNotes: 'Medium integration tokens are created instantly. Requires a Medium account.'\n  }\n\n}\n\n// Difficult/advanced platforms - NOT shown in setup wizard\n// These require significant setup effort or have complex APIs\nexport const DIFFICULT_PLATFORM_SIGNUP_REQUIREMENTS: Record<string, PlatformSignupRequirements> = {\n  discord: {\n    platform: 'discord',\n    displayName: 'Discord',\n    requiredFields: [\n      {\n        key: 'email',\n        label: 'Email Address',\n        type: 'email',\n        description: 'Email for account creation',\n        validation: (value) => {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          return emailRegex.test(value) || 'Must be a valid email address';\n        }\n      },\n      {\n        key: 'username',\n        label: 'Username',\n        type: 'text',\n        description: 'Choose a unique username',\n        validation: (value) => {\n          if (value.length < 2) return 'Username must be at least 2 characters';\n          if (value.length > 32) return 'Username must be 32 characters or less';\n          if (!/^[a-zA-Z0-9_-]+$/.test(value)) return 'Only letters, numbers, hyphens, and underscores allowed';\n          return true;\n        }\n      },\n      {\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        description: 'Strong password for your account',\n        validation: (value) => {\n          if (value.length < 8) return 'Password must be at least 8 characters';\n          return true;\n        }\n      }\n    ],\n    profileFields: [\n      {\n        key: 'displayName',\n        label: 'Display Name',\n        type: 'text',\n        description: 'Your display name (can include spaces and special characters)',\n        maxLength: 32,\n        recommended: true\n      },\n      {\n        key: 'bio',\n        label: 'About Me/Bio',\n        type: 'textarea',\n        description: 'Tell people about yourself or your project',\n        maxLength: 190,\n        recommended: true\n      },\n      {\n        key: 'avatar',\n        label: 'Profile Picture',\n        type: 'file',\n        description: 'Profile picture (will be cropped to circle)',\n        recommended: true\n      },\n      {\n        key: 'banner',\n        label: 'Profile Banner',\n        type: 'file',\n        description: 'Banner image for your profile',\n        recommended: false\n      }\n    ],\n    signupSteps: [\n      '1. Go to https://discord.com/register',\n      '2. Enter your email address',\n      '3. Choose a unique username',\n      '4. Create a strong password',\n      '5. Enter your date of birth (must be 13+ to use Discord)',\n      '6. Complete any CAPTCHA if required',\n      '7. Check your email and verify your account'\n    ],\n    setupSteps: [\n      '1. Complete your profile with bio and images',\n      '2. Go to https://discord.com/developers/applications',\n      '3. Click \"New Application\"',\n      '4. Name: \"HyperPost Bot\"',\n      '5. Go to \"Bot\" section and click \"Add Bot\"',\n      '6. Copy the bot token (the setup wizard will collect this)',\n      '7. Get a channel ID from your server (right-click channel → Copy ID)'\n    ],\n    verificationNotes: 'Discord requires email verification and accounts must be 13+. Bot tokens are separate from user accounts and require a bot application. You need a server and channel to post to. Discord has rate limits on bot posting.'\n  },\n\n  reddit: {\n    platform: 'reddit',\n    displayName: 'Reddit',\n    requiredFields: [\n      {\n        key: 'username',\n        label: 'Username',\n        type: 'text',\n        description: 'Choose a unique Reddit username',\n        validation: (value) => {\n          if (value.length < 3) return 'Username must be at least 3 characters';\n          if (value.length > 20) return 'Username must be 20 characters or less';\n          if (!/^[a-zA-Z0-9_-]+$/.test(value)) return 'Only letters, numbers, hyphens, and underscores allowed';\n          return true;\n        }\n      },\n      {\n        key: 'email',\n        label: 'Email Address',\n        type: 'email',\n        description: 'Email for account verification',\n        validation: (value) => {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          return emailRegex.test(value) || 'Must be a valid email address';\n        }\n      },\n      {\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        description: 'Strong password for your account',\n        validation: (value) => {\n          if (value.length < 8) return 'Password must be at least 8 characters';\n          return true;\n        }\n      }\n    ],\n    profileFields: [\n      {\n        key: 'displayName',\n        label: 'Display Name',\n        type: 'text',\n        description: 'Your display name (optional, can be changed later)',\n        maxLength: 30,\n        recommended: false\n      },\n      {\n        key: 'bio',\n        label: 'About/Description',\n        type: 'textarea',\n        description: 'Tell the Reddit community about yourself',\n        maxLength: 200,\n        recommended: true\n      },\n      {\n        key: 'website',\n        label: 'Website',\n        type: 'url',\n        description: 'Link to your website or project',\n        recommended: true\n      },\n      {\n        key: 'avatar',\n        label: 'Profile Picture',\n        type: 'file',\n        description: 'Square image, will be displayed on your profile',\n        recommended: true\n      },\n      {\n        key: 'banner',\n        label: 'Profile Banner',\n        type: 'file',\n        description: 'Banner image for your profile',\n        recommended: false\n      },\n      {\n        key: 'location',\n        label: 'Location',\n        type: 'text',\n        description: 'Where you\\'re from or based',\n        maxLength: 100,\n        recommended: false\n      }\n    ],\n    signupSteps: [\n      '1. Go to https://www.reddit.com/register/',\n      '2. Choose a unique username',\n      '3. Enter your email address',\n      '4. Create a strong password',\n      '5. Complete any CAPTCHA if required',\n      '6. Check your email and verify your account'\n    ],\n    setupSteps: [\n      '1. Complete your profile with bio, website, and images',\n      '2. Go to https://www.reddit.com/prefs/apps/',\n      '3. Click \"Create App\" or \"Create Another App\"',\n      '4. Type: \"script\", Name: \"HyperPost\", Description: \"Multi-platform posting\"',\n      '5. Redirect URI: \"http://localhost:8080\"',\n      '6. Copy the client_id and secret (the setup wizard will collect this)'\n    ],\n    verificationNotes: 'Reddit requires email verification. You must create an app in preferences to get API credentials. Reddit has strict API rate limits and requires OAuth for posting. Network connectivity issues may prevent API access.'\n  },\n\n  twitter: {\n    platform: 'twitter',\n    displayName: 'Twitter/X',\n    requiredFields: [\n      {\n        key: 'apiKey',\n        label: 'API Key',\n        type: 'password',\n        description: 'Twitter API Key from developer portal',\n        validation: (value) => {\n          if (value.length < 20) return 'API Key should be longer';\n          return true;\n        }\n      },\n      {\n        key: 'apiSecret',\n        label: 'API Secret',\n        type: 'password',\n        description: 'Twitter API Secret from developer portal',\n        validation: (value) => {\n          if (value.length < 40) return 'API Secret should be longer';\n          return true;\n        }\n      },\n      {\n        key: 'accessToken',\n        label: 'Access Token',\n        type: 'password',\n        description: 'Twitter Access Token from developer portal',\n        validation: (value) => {\n          if (value.length < 40) return 'Access Token should be longer';\n          return true;\n        }\n      },\n      {\n        key: 'accessTokenSecret',\n        label: 'Access Token Secret',\n        type: 'password',\n        description: 'Twitter Access Token Secret from developer portal',\n        validation: (value) => {\n          if (value.length < 40) return 'Access Token Secret should be longer';\n          return true;\n        }\n      }\n    ],\n    profileFields: [\n      {\n        key: 'displayName',\n        label: 'Display Name',\n        type: 'text',\n        description: 'Your display name on Twitter',\n        maxLength: 50,\n        recommended: true\n      },\n      {\n        key: 'bio',\n        label: 'Bio',\n        type: 'textarea',\n        description: 'Your Twitter bio',\n        maxLength: 160,\n        recommended: true\n      },\n      {\n        key: 'website',\n        label: 'Website',\n        type: 'url',\n        description: 'Link to your website',\n        recommended: true\n      },\n      {\n        key: 'location',\n        label: 'Location',\n        type: 'text',\n        description: 'Your location',\n        maxLength: 30,\n        recommended: false\n      },\n      {\n        key: 'avatar',\n        label: 'Profile Picture',\n        type: 'file',\n        description: 'Profile picture (will be cropped to circle)',\n        recommended: true\n      },\n      {\n        key: 'banner',\n        label: 'Header Image',\n        type: 'file',\n        description: 'Header/banner image for your profile',\n        recommended: false\n      }\n    ],\n    signupSteps: [\n      '1. Apply for Twitter Developer Account at https://developer.twitter.com/',\n      '2. Wait for approval (can take days/weeks)',\n      '3. Create a new app in the developer portal',\n      '4. Generate API keys and access tokens',\n      '5. Set up OAuth 1.0a authentication'\n    ],\n    setupSteps: [\n      '1. Complete your Twitter profile with bio, website, and images',\n      '2. In developer portal, go to your app settings',\n      '3. Generate API Key, API Secret, Access Token, and Access Token Secret',\n      '4. Ensure your app has write permissions',\n      '5. Test API connectivity before using'\n    ],\n    verificationNotes: 'Twitter/X requires developer account approval which can take significant time. API access is restricted and requires OAuth 1.0a. Twitter has strict rate limits and API changes frequently. Not recommended for casual use.'\n  }\n};\n\n// All platforms (main + difficult) for internal use\nexport const ALL_PLATFORM_SIGNUP_REQUIREMENTS = {\n  ...PLATFORM_SIGNUP_REQUIREMENTS,\n  ...DIFFICULT_PLATFORM_SIGNUP_REQUIREMENTS\n};\n\n// Function to get a signup template for a platform\nexport function getSignupTemplate(platform: string): SignupTemplate {\n  const requirements = PLATFORM_SIGNUP_REQUIREMENTS[platform];\n  if (!requirements) {\n    throw new Error(`No signup template available for platform: ${platform}`);\n  }\n\n  // Create a template based on the platform requirements\n  const template: SignupTemplate = {\n    ...DEFAULT_SIGNUP_TEMPLATE,\n    username: DEFAULT_SIGNUP_TEMPLATE.username,\n    displayName: DEFAULT_SIGNUP_TEMPLATE.displayName,\n    email: DEFAULT_SIGNUP_TEMPLATE.email\n  };\n\n  return template;\n}\n\n// Function to validate a signup template for a platform\nexport function validateSignupTemplate(platform: string, template: SignupTemplate): { valid: boolean; errors: string[] } {\n  const requirements = PLATFORM_SIGNUP_REQUIREMENTS[platform];\n  if (!requirements) {\n    return { valid: false, errors: [`Unknown platform: ${platform}`] };\n  }\n\n  const errors: string[] = [];\n\n  // Check required fields\n  for (const field of requirements.requiredFields) {\n    const value = template[field.key as keyof SignupTemplate] as string;\n    if (!value) {\n      errors.push(`Missing required field: ${field.label}`);\n    } else if (field.validation) {\n      const validationResult = field.validation(value);\n      if (validationResult !== true) {\n        errors.push(`${field.label}: ${validationResult}`);\n      }\n    }\n  }\n\n  // Check profile field lengths\n  for (const field of requirements.profileFields) {\n    const value = template[field.key as keyof SignupTemplate] as string;\n    if (value && field.maxLength && value.length > field.maxLength) {\n      errors.push(`${field.label} exceeds maximum length of ${field.maxLength} characters`);\n    }\n  }\n\n  return { valid: errors.length === 0, errors };\n}\n","import * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport { SignupTemplate, PLATFORM_SIGNUP_REQUIREMENTS } from './signup-templates';\n\nexport interface PersistedSignupData {\n  version: string;\n  templates: Record<string, SignupTemplate>;\n  completedAccounts: Record<string, any>;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Default template configuration - loaded from config.json (or .hyperpost-config.json for backward compatibility)\nconst DEFAULT_CONFIG_FILE = 'config.json';\nconst LEGACY_CONFIG_FILE = '.hyperpost-config.json';\n\ninterface HyperPostConfig {\n  defaultTemplate: SignupTemplate;\n}\n\n// Fallback default template if config file doesn't exist\nconst FALLBACK_DEFAULT_TEMPLATE: SignupTemplate = {\n  username: 'hyperdrift',\n  displayName: 'HyperDrift',\n  email: 'yann@hyperdrift.io',\n  bio: 'Building the future of software development. Open-source tools for independent developers and communities. #Web3 #OpenSource #DeveloperTools',\n  description: 'HyperDrift is an ecosystem of small but focused apps, tools, and thoughts. We build software that solves real problems, shares ideas openly, and puts developers first.',\n  website: 'https://hyperdrift.io',\n  location: 'Digital Nomad',\n  accountType: 'project',\n  primaryTopics: ['web3', 'opensource', 'developer-tools', 'productivity', 'community'],\n  targetAudience: 'Independent developers, open-source contributors, and communities building the future of software'\n};\n\nexport class SignupManager {\n  private dataPath: string;\n  private data!: PersistedSignupData;\n  private configPath: string;\n  private config!: HyperPostConfig;\n  private configDir: string;\n\n  constructor() {\n    this.configDir = this.getConfigDirectory();\n    this.dataPath = path.join(this.configDir, 'signup-data.json');\n    this.configPath = this.getConfigFilePath();\n    this.loadData();\n    this.loadConfig();\n  }\n\n  private getConfigFilePath(): string {\n    const newConfigPath = path.join(this.configDir, DEFAULT_CONFIG_FILE);\n    const legacyConfigPath = path.join(this.configDir, LEGACY_CONFIG_FILE);\n\n    // Use new config file if it exists, otherwise legacy, otherwise new\n    if (fs.existsSync(newConfigPath)) {\n      return newConfigPath;\n    } else if (fs.existsSync(legacyConfigPath)) {\n      return legacyConfigPath;\n    } else {\n      return newConfigPath;\n    }\n  }\n\n  /**\n   * Determine the appropriate config directory based on installation type\n   */\n  private getConfigDirectory(): string {\n    // Always use user config directory for CLI usage\n    // This ensures consistent behavior regardless of where the CLI is run from\n    const userConfigDir = path.join(os.homedir(), '.config', 'hyper-post');\n\n    // Create the directory if it doesn't exist\n    if (!fs.existsSync(userConfigDir)) {\n      fs.mkdirSync(userConfigDir, { recursive: true });\n    }\n\n    return userConfigDir;\n  }\n\n  private loadData(): void {\n    try {\n      if (fs.existsSync(this.dataPath)) {\n        const content = fs.readFileSync(this.dataPath, 'utf8');\n        this.data = JSON.parse(content);\n        // Validate version compatibility\n        if (this.data.version !== '1.0') {\n          console.warn('Signup data version mismatch, resetting...');\n          this.initializeData();\n        }\n      } else {\n        this.initializeData();\n      }\n    } catch (error) {\n      console.warn('Failed to load signup data, initializing new data...');\n      this.initializeData();\n    }\n  }\n\n  private initializeData(): void {\n    this.data = {\n      version: '1.0',\n      templates: {},\n      completedAccounts: {},\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n  }\n\n  private loadConfig(): void {\n    try {\n      if (fs.existsSync(this.configPath)) {\n        const content = fs.readFileSync(this.configPath, 'utf8');\n        this.config = JSON.parse(content);\n      } else {\n        // Create default config file\n        this.config = { defaultTemplate: FALLBACK_DEFAULT_TEMPLATE };\n        this.saveConfig();\n      }\n    } catch (error) {\n      console.error('Error loading config:', error);\n      this.config = { defaultTemplate: FALLBACK_DEFAULT_TEMPLATE };\n    }\n  }\n\n  private saveConfig(): void {\n    try {\n      fs.writeFileSync(this.configPath, JSON.stringify(this.config, null, 2), 'utf8');\n    } catch (error) {\n      console.error('Error saving config:', error);\n    }\n  }\n\n  private saveData(): void {\n    this.data.updatedAt = new Date().toISOString();\n    fs.writeFileSync(this.dataPath, JSON.stringify(this.data, null, 2));\n  }\n\n  // Template management\n  hasTemplate(platform?: string): boolean {\n    if (platform) {\n      return !!this.data.templates[platform];\n    }\n    return Object.keys(this.data.templates).length > 0;\n  }\n\n  getTemplate(platform: string): SignupTemplate | null {\n    return this.data.templates[platform] || null;\n  }\n\n  getAllTemplates(): Record<string, SignupTemplate> {\n    return { ...this.data.templates };\n  }\n\n  saveTemplate(platform: string, template: SignupTemplate): void {\n    this.data.templates[platform] = { ...template };\n    this.saveData();\n  }\n\n  // Account management\n  hasCompletedAccount(platform: string): boolean {\n    return !!this.data.completedAccounts[platform];\n  }\n\n  getCompletedAccount(platform: string): any {\n    return this.data.completedAccounts[platform] || null;\n  }\n\n  saveCompletedAccount(platform: string, credentials: any): void {\n    this.data.completedAccounts[platform] = {\n      ...credentials,\n      createdAt: new Date().toISOString()\n    };\n    this.saveData();\n  }\n\n  getAllCompletedAccounts(): Record<string, any> {\n    return { ...this.data.completedAccounts };\n  }\n\n  // Utility methods\n  getConfiguredPlatforms(): string[] {\n    return Object.keys(this.data.completedAccounts);\n  }\n\n  getAvailablePlatforms(): string[] {\n    return Object.keys(PLATFORM_SIGNUP_REQUIREMENTS);\n  }\n\n  resetPlatform(platform: string): void {\n    delete this.data.templates[platform];\n    delete this.data.completedAccounts[platform];\n    this.saveData();\n  }\n\n  // Get default template for examples\n  getDefaultTemplate(): SignupTemplate {\n    return { ...this.config.defaultTemplate };\n  }\n\n  // Initialize with default template if no templates exist\n  ensureDefaultTemplate(): void {\n    if (!this.hasTemplate()) {\n      console.log('💡 No templates found. Using default template as example...');\n      // Don't save it automatically, just use as reference\n    }\n  }\n\n  // Update the default template configuration\n  updateDefaultTemplate(template: SignupTemplate): void {\n    this.config.defaultTemplate = { ...template };\n    this.saveConfig();\n  }\n\n  exportToEnv(): string {\n    let envContent = '# HyperPost Configuration\\n';\n    envContent += `# Generated from signup templates on ${new Date().toISOString()}\\n\\n`;\n\n    for (const [platform, credentials] of Object.entries(this.data.completedAccounts)) {\n      const requirements = PLATFORM_SIGNUP_REQUIREMENTS[platform];\n      if (!requirements) continue;\n\n      envContent += `# ========================================\\n`;\n      envContent += `# ${requirements.displayName}\\n`;\n      envContent += `# ========================================\\n`;\n\n      const template = this.data.templates[platform];\n      if (template) {\n        envContent += `# Account: ${template.displayName} (${template.username})\\n`;\n        envContent += `# Email: ${template.email}\\n`;\n        if (template.bio) envContent += `# Bio: ${template.bio}\\n`;\n        if (template.website) envContent += `# Website: ${template.website}\\n`;\n        if (template.location) envContent += `# Location: ${template.location}\\n`;\n      }\n\n      // Add API credentials\n      for (const [key, value] of Object.entries(credentials)) {\n        if (key !== 'createdAt') {\n          const envKey = `${platform.toUpperCase()}_${key.toUpperCase()}`;\n          envContent += `${envKey}=${value}\\n`;\n        }\n      }\n\n      envContent += '\\n';\n    }\n\n    return envContent;\n  }\n}\n","import * as readline from 'readline';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { PLATFORM_SIGNUP_REQUIREMENTS, ALL_PLATFORM_SIGNUP_REQUIREMENTS, SignupTemplate, getSignupTemplate, validateSignupTemplate } from './signup-templates';\nimport { SignupManager } from './signup-manager';\n\n// ANSI color codes for shiny prompts\nconst colors = {\n  reset: '\\x1b[0m',\n  bright: '\\x1b[1m',\n  dim: '\\x1b[2m',\n\n  // Foreground colors\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n  cyan: '\\x1b[36m',\n  white: '\\x1b[37m',\n\n  // Background colors\n  bgRed: '\\x1b[41m',\n  bgGreen: '\\x1b[42m',\n  bgYellow: '\\x1b[43m',\n  bgBlue: '\\x1b[44m',\n  bgMagenta: '\\x1b[45m',\n  bgCyan: '\\x1b[46m',\n};\n\nclass HyperPostSetup {\n  private rl: readline.Interface;\n  private signupManager: SignupManager;\n  private isRunning: boolean = false;\n\n  constructor() {\n    // Create readline interface with proper configuration for both interactive and piped input\n    const isPiped = !process.stdin.isTTY || process.env.CI === 'true';\n    this.rl = readline.createInterface({\n      input: process.stdin,\n      output: isPiped ? undefined : process.stdout,\n      terminal: !isPiped\n    });\n    this.signupManager = new SignupManager();\n  }\n\n  private isPipedInput(): boolean {\n    return !process.stdin.isTTY || process.env.CI === 'true';\n  }\n\n  private printHeader(): void {\n    console.log(`${colors.bright}${colors.cyan}╔══════════════════════════════════════════════════════════╗${colors.reset}`);\n    console.log(`${colors.bright}${colors.cyan}║${colors.reset}${colors.bright}${colors.white}                 🚀 HYPERPOST SETUP WIZARD${colors.reset}${colors.bright}${colors.cyan}                 ║${colors.reset}`);\n    console.log(`${colors.bright}${colors.cyan}╚══════════════════════════════════════════════════════════╝${colors.reset}`);\n    console.log('');\n    console.log(`${colors.yellow}Create genuine social media accounts with complete profiles${colors.reset}`);\n    console.log(`${colors.yellow}for professional, trustworthy presence across platforms.${colors.reset}\\n`);\n  }\n\n  async run(): Promise<void> {\n    if (this.isRunning) {\n      console.log(`${colors.yellow}Setup is already running...${colors.reset}`);\n      return;\n    }\n    this.isRunning = true;\n\n    this.printHeader();\n\n    // Show current status from signup manager\n    console.log(`${colors.blue}📁 Configuration Status:${colors.reset}`);\n    const existingPlatforms = this.signupManager.getConfiguredPlatforms();\n    if (existingPlatforms.length > 0) {\n      console.log(`${colors.green}Currently configured platforms:${colors.reset}`, existingPlatforms.join(', '));\n    } else {\n      console.log(`${colors.yellow}No platforms currently configured.${colors.reset}`);\n    }\n    console.log(`${colors.dim}New platform credentials will be added to your configuration.${colors.reset}\\n`);\n\n    // Check for quick setup mode\n    const quickSetup = process.argv.includes('--quick') || process.argv.includes('-q');\n    if (quickSetup) {\n      await this.quickSetup();\n      return;\n    }\n\n    // Set up database first\n    const dbChoice = await this.selectDatabase();\n\n    // Create signup templates\n    await this.createSignupTemplates();\n\n    const platforms = await this.selectPlatforms();\n\n    for (const platform of platforms) {\n      await this.createPlatformAccount(platform);\n    }\n\n    console.log(`\\n${colors.bright}${colors.green}🎉 ALL ACCOUNTS CREATED AND CONFIGURED!${colors.reset}`);\n    console.log(`${colors.cyan}You can now post to all platforms with:${colors.reset}`);\n    console.log(`${colors.yellow}hyper-post post -c \"Your message\" -t \"Title\" -u \"https://link.com\"${colors.reset}`);\n\n    this.rl.close();\n    this.isRunning = false;\n  }\n\n  private async quickSetup(): Promise<void> {\n    console.log(`${colors.yellow}⚡ QUICK SETUP MODE${colors.reset}`);\n    console.log(`${colors.dim}═══════════════════${colors.reset}`);\n    console.log(`${colors.cyan}This mode will use default values and skip most prompts.${colors.reset}\\n`);\n\n    // Set up database with SQLite by default\n    await this.setupSQLite();\n\n    // Create default signup template\n    const defaultTemplate = this.signupManager.getDefaultTemplate();\n    Object.keys(ALL_PLATFORM_SIGNUP_REQUIREMENTS).forEach(platform => {\n      this.signupManager.saveTemplate(platform, defaultTemplate);\n    });\n\n    console.log(`${colors.green}✅ Quick setup complete!${colors.reset}`);\n    console.log(`${colors.cyan}You can now configure individual platforms manually.${colors.reset}`);\n\n    this.rl.close();\n    this.isRunning = false;\n  }\n\n  private async createSignupTemplates(): Promise<void> {\n    console.log(`${colors.bright}${colors.magenta}📝 SIGNUP TEMPLATES${colors.reset}`);\n    console.log(`${colors.dim}════════════════════${colors.reset}`);\n\n    const existingTemplates = this.signupManager.getAllTemplates();\n    const defaultTemplate = this.signupManager.getDefaultTemplate();\n\n    if (Object.keys(existingTemplates).length > 0) {\n      console.log(`${colors.blue}Found existing signup templates:${colors.reset}`);\n      Object.entries(existingTemplates).forEach(([platform, template]) => {\n        console.log(`  ${colors.green}•${colors.reset} ${platform}: ${template.displayName} (${template.email})`);\n      });\n\n      const reuse = await this.askYesNo('\\nReuse existing template for new platforms?');\n      if (reuse) {\n        // Copy existing template to platforms that don't have templates yet\n        const baseTemplate = Object.values(existingTemplates)[0]; // Use first existing template as base\n        Object.keys(ALL_PLATFORM_SIGNUP_REQUIREMENTS).forEach(platform => {\n          if (!existingTemplates[platform]) {\n            this.signupManager.saveTemplate(platform, baseTemplate);\n          }\n        });\n        console.log(`${colors.green}✅ Using existing template for all platforms.${colors.reset}\\n`);\n        return;\n      }\n      console.log(`${colors.yellow}📝 Creating new template.${colors.reset}\\n`);\n    }\n\n    console.log(`${colors.cyan}Let's create consistent branding across all platforms.${colors.reset}`);\n    console.log(`${colors.dim}Using HyperDrift as example template...${colors.reset}\\n`);\n\n    // Get account type\n    const accountType = await this.selectAccountType();\n\n    // Basic account info with default values\n    const username = await this.askFieldWithDefault({\n      key: 'username',\n      label: 'Base Username',\n      description: 'Base username (will be adapted per platform)',\n      type: 'text',\n      required: true,\n      defaultValue: defaultTemplate.username,\n      validation: (value: string) => {\n        if (value.length < 2) return 'Username must be at least 2 characters';\n        if (!/^[a-zA-Z0-9_-]+$/.test(value)) return 'Only letters, numbers, hyphens, underscores';\n        return true;\n      }\n    });\n\n    const displayName = await this.askFieldWithDefault({\n      key: 'displayName',\n      label: 'Display Name',\n      description: 'Full name or project name shown publicly',\n      type: 'text',\n      required: true,\n      defaultValue: defaultTemplate.displayName\n    });\n\n    const email = await this.askFieldWithDefault({\n      key: 'email',\n      label: 'Email Address',\n      description: 'Primary email for accounts (can vary per platform)',\n      type: 'email',\n      required: true,\n      defaultValue: defaultTemplate.email\n    });\n\n    // Profile information\n    console.log(`\\n${colors.cyan}📋 Profile Information (consistent across platforms):${colors.reset}`);\n\n    const bio = await this.askFieldWithDefault({\n      key: 'bio',\n      label: 'Bio/Description',\n      description: 'Short description of your project/persona',\n      type: 'textarea',\n      required: true,\n      maxLength: 200,\n      defaultValue: defaultTemplate.bio\n    });\n\n    const website = await this.askFieldWithDefault({\n      key: 'website',\n      label: 'Website URL',\n      description: 'Your main website or project URL',\n      type: 'url',\n      required: true,\n      defaultValue: defaultTemplate.website\n    });\n\n    const location = await this.askFieldWithDefault({\n      key: 'location',\n      label: 'Location',\n      description: 'Location (city, country, or \"Digital Nomad\")',\n      type: 'text',\n      required: false,\n      defaultValue: defaultTemplate.location\n    });\n\n    // Create base template\n    const baseTemplate: SignupTemplate = {\n      username,\n      displayName,\n      email,\n      bio,\n      website,\n      location,\n      accountType,\n      primaryTopics: defaultTemplate.primaryTopics,\n      targetAudience: defaultTemplate.targetAudience\n    };\n\n    // Store template for all platforms (main + difficult)\n    Object.keys(ALL_PLATFORM_SIGNUP_REQUIREMENTS).forEach(platform => {\n      this.signupManager.saveTemplate(platform, baseTemplate);\n    });\n\n    console.log(`${colors.green}✅ Signup templates created and saved!${colors.reset}\\n`);\n  }\n\n  private async selectDatabase(): Promise<'sqlite' | 'postgresql'> {\n    console.log(`${colors.bright}${colors.blue}🗄️  DATABASE SETUP${colors.reset}`);\n    console.log(`${colors.dim}═══════════════${colors.reset}`);\n\n    console.log(`${colors.cyan}Choose your database:${colors.reset}`);\n    console.log(`${colors.green}1.${colors.reset} SQLite (Recommended) - Simple, no setup required`);\n    console.log(`${colors.yellow}2.${colors.reset} PostgreSQL - Advanced, requires PostgreSQL server`);\n    console.log('');\n\n    // Check if we already have a database configured\n    const hasExistingSchema = fs.existsSync(path.join(process.cwd(), 'schema.prisma'));\n    if (hasExistingSchema) {\n      console.log(`${colors.blue}📁 Existing database schema found. We'll update it with your choice.${colors.reset}`);\n      console.log('');\n    }\n\n    while (true) {\n      const choice = await this.askField({\n        key: 'database',\n        label: 'Database Choice (1-2)',\n        description: 'Choose database type',\n        type: 'text',\n        required: true\n      });\n\n      switch (choice) {\n        case '1':\n          await this.setupSQLite();\n          return 'sqlite';\n        case '2':\n          await this.setupPostgreSQL();\n          return 'postgresql';\n        default:\n          console.log(`${colors.red}❌ Please choose 1 or 2.${colors.reset}`);\n      }\n    }\n  }\n\n  private async selectAccountType(): Promise<'personal' | 'business' | 'community' | 'project'> {\n    console.log(`${colors.cyan}What type of account is this?${colors.reset}`);\n    console.log(`${colors.yellow}1.${colors.reset} Personal - Individual developer/streamer`);\n    console.log(`${colors.yellow}2.${colors.reset} Business - Company or startup`);\n    console.log(`${colors.yellow}3.${colors.reset} Community - Group or organization`);\n    console.log(`${colors.yellow}4.${colors.reset} Project - Open source project or tool`);\n\n    while (true) {\n      const choice = await this.askField({\n        key: 'choice',\n        label: 'Account Type (1-4)',\n        description: 'Choose account type',\n        type: 'text',\n        required: true\n      });\n\n      switch (choice) {\n        case '1': return 'personal';\n        case '2': return 'business';\n        case '3': return 'community';\n        case '4': return 'project';\n        default:\n          console.log(`${colors.red}❌ Please choose 1, 2, 3, or 4.${colors.reset}`);\n      }\n    }\n  }\n\n  private async setupSQLite(): Promise<void> {\n    console.log(`${colors.green}📦 Setting up SQLite database...${colors.reset}`);\n\n    try {\n      // Update schema.prisma for SQLite\n      const schemaPath = path.join(process.cwd(), 'schema.prisma');\n      let schemaContent = fs.readFileSync(schemaPath, 'utf8');\n\n      // Replace PostgreSQL with SQLite\n      schemaContent = schemaContent.replace(\n        /datasource db \\{\\s*provider = \"postgresql\"/,\n        'datasource db {\\n  provider = \"sqlite\"'\n      );\n\n      // Update the URL for SQLite\n      schemaContent = schemaContent.replace(\n        /url\\s*=\\s*env\\(\"DATABASE_URL\"\\)/,\n        'url = \"file:./hyperpost.db\"'\n      );\n\n      fs.writeFileSync(schemaPath, schemaContent, 'utf8');\n      console.log(`${colors.green}✅ Updated schema.prisma for SQLite${colors.reset}`);\n\n      // Generate Prisma client and create database\n      await this.runPrismaCommands();\n\n    } catch (error) {\n      console.log(`${colors.yellow}⚠️  SQLite setup completed with warnings. You may need to run 'pnpm db:generate && pnpm db:push' manually.${colors.reset}`);\n    }\n  }\n\n  private async setupPostgreSQL(): Promise<void> {\n    console.log(`${colors.yellow}🐘 Setting up PostgreSQL database...${colors.reset}`);\n\n    // Check for existing DATABASE_URL\n    const existingDbUrl = process.env.DATABASE_URL;\n    if (existingDbUrl) {\n      console.log(`${colors.blue}📋 Found existing DATABASE_URL environment variable${colors.reset}`);\n      const useExisting = await this.askYesNo('Use existing DATABASE_URL?');\n      if (useExisting) {\n        await this.setupPostgreSQLWithUrl(existingDbUrl);\n        return;\n      }\n    }\n\n    // Ask for full DATABASE_URL directly\n    console.log(`${colors.cyan}DATABASE_URL format:${colors.reset}`);\n    console.log(`${colors.dim}postgresql://username:password@host:port/database${colors.reset}`);\n    const currentUser = process.env.USER || 'postgres';\n    console.log(`${colors.dim}Example: postgresql://[${currentUser}]@localhost:5432/hyper-post${colors.reset}`);\n    console.log('');\n\n    const dbUrl = await this.askFieldWithDefault({\n      key: 'database_url',\n      label: 'DATABASE_URL',\n      description: 'Full PostgreSQL connection URL',\n      type: 'text',\n      required: true,\n      defaultValue: `postgresql://${currentUser}:password@localhost:5432/hyperpost`\n    });\n\n    await this.setupPostgreSQLWithUrl(dbUrl);\n  }\n\n  private async setupPostgreSQLWithUrl(dbUrl: string): Promise<void> {\n    try {\n      // Update schema.prisma for PostgreSQL\n      const schemaPath = path.join(process.cwd(), 'schema.prisma');\n      let schemaContent = fs.readFileSync(schemaPath, 'utf8');\n\n      // Ensure it's set to PostgreSQL\n      schemaContent = schemaContent.replace(\n        /datasource db \\{\\s*provider = \"[^\"]*\"/,\n        'datasource db {\\n  provider = \"postgresql\"'\n      );\n\n      // Update the URL\n      schemaContent = schemaContent.replace(\n        /url\\s*=\\s*\"[^\"]*\"/,\n        `url = env(\"DATABASE_URL\")`\n      );\n\n      fs.writeFileSync(schemaPath, schemaContent, 'utf8');\n      console.log(`${colors.green}✅ Updated schema.prisma for PostgreSQL${colors.reset}`);\n\n      // Set DATABASE_URL environment variable for this session\n      process.env.DATABASE_URL = dbUrl;\n\n      // Generate Prisma client and create database\n      await this.runPrismaCommands();\n\n    } catch (error) {\n      console.log(`${colors.yellow}⚠️  PostgreSQL setup completed with warnings. You may need to run 'pnpm db:generate && pnpm db:push' manually.${colors.reset}`);\n      console.log(`${colors.dim}Make sure your PostgreSQL server is running and accessible.${colors.reset}`);\n    }\n  }\n\n  private async runPrismaCommands(): Promise<void> {\n    const { execSync } = require('child_process');\n\n    try {\n      console.log(`${colors.blue}🔄 Generating Prisma client...${colors.reset}`);\n      execSync('npx prisma generate', { stdio: 'inherit' });\n\n      console.log(`${colors.blue}📦 Setting up database schema...${colors.reset}`);\n      execSync('npx prisma db push', { stdio: 'inherit' });\n\n      console.log(`${colors.green}✅ Database setup complete!${colors.reset}`);\n    } catch (error) {\n      console.log(`${colors.yellow}⚠️  Prisma commands failed. You may need to run them manually:${colors.reset}`);\n      console.log(`${colors.dim}  pnpm db:generate && pnpm db:push${colors.reset}`);\n      throw error;\n    }\n  }\n\n\n  private async selectPlatforms(): Promise<string[]> {\n    console.log(`${colors.bright}${colors.blue}🎯 SELECT PLATFORMS TO SET UP${colors.reset}`);\n    console.log(`${colors.dim}════════════════════════════${colors.reset}`);\n\n    const configuredPlatforms = this.signupManager.getConfiguredPlatforms();\n    const availablePlatforms = Object.entries(PLATFORM_SIGNUP_REQUIREMENTS);\n\n    console.log(`\\n${colors.cyan}Available platforms:${colors.reset}`);\n    availablePlatforms.forEach(([key, req], index) => {\n      const isConfigured = configuredPlatforms.includes(key);\n      const status = isConfigured ? `${colors.green}[CONFIGURED]${colors.reset}` : `${colors.yellow}[NOT SET UP]${colors.reset}`;\n      console.log(`   ${colors.yellow}${index + 1}.${colors.reset} ${key}: ${req.displayName} ${status}`);\n    });\n\n    if (configuredPlatforms.length > 0) {\n      console.log(`\\n${colors.blue}💡 You can reconfigure existing platforms or add new ones.${colors.reset}`);\n      console.log(`   ${colors.dim}Existing credentials will be updated with new values.${colors.reset}`);\n    }\n\n    console.log(`\\n${colors.cyan}Select platforms by number (comma-separated, e.g., \"1,3,4\"):${colors.reset}`);\n\n    const selection = await this.askField({\n      key: 'platforms',\n      label: 'Platform Numbers',\n      description: 'Comma-separated list of platform numbers',\n      type: 'text',\n      required: true\n    });\n\n    const selectedIndices = selection.split(',').map(s => parseInt(s.trim()) - 1);\n    const selectedPlatforms: string[] = [];\n\n    for (const index of selectedIndices) {\n      if (index >= 0 && index < availablePlatforms.length) {\n        const platformKey = availablePlatforms[index][0];\n        selectedPlatforms.push(platformKey);\n      }\n    }\n\n    if (selectedPlatforms.length === 0) {\n      console.log(`${colors.red}❌ No valid platforms selected. Exiting.${colors.reset}`);\n      process.exit(1);\n    }\n\n    console.log(`\\n${colors.green}✅ Selected platforms: ${selectedPlatforms.join(', ')}${colors.reset}\\n`);\n    return selectedPlatforms;\n  }\n\n  private async createPlatformAccount(platform: string): Promise<void> {\n    const requirements = PLATFORM_SIGNUP_REQUIREMENTS[platform];\n    let template = this.signupManager.getTemplate(platform);\n\n    if (!template) {\n      console.log(`❌ No signup template found for ${requirements.displayName}. Please create templates first.`);\n      return;\n    }\n\n    console.log(`\\n🏗️  Creating ${requirements.displayName} Account`);\n    console.log('='.repeat(50));\n\n    console.log(`\\n📋 ${requirements.displayName} Account Creation Guide:`);\n    console.log('='.repeat(50));\n\n    // Show signup steps\n    console.log('\\n📝 ACCOUNT CREATION STEPS:');\n    requirements.signupSteps.forEach((step, index) => {\n      console.log(`   ${index + 1}. ${step}`);\n    });\n\n    // Fill required fields\n    console.log(`\\n🔑 REQUIRED ACCOUNT INFORMATION:`);\n    for (const field of requirements.requiredFields) {\n      const value = await this.askField(field);\n      template.customFields = template.customFields || {};\n      template.customFields[field.key] = value;\n    }\n\n\n    // Show setup steps\n    console.log(`\\n🔧 POST-CREATION SETUP STEPS:`);\n    requirements.setupSteps.forEach((step, index) => {\n      console.log(`   ${index + 1}. ${step}`);\n    });\n\n    if (requirements.verificationNotes) {\n      console.log(`\\n⚠️  VERIFICATION NOTES:`);\n      console.log(`   ${requirements.verificationNotes}`);\n    }\n\n    console.log(`\\n⏳ Complete the account creation steps above, then:`);\n\n    // Get API credentials\n    console.log(`\\n🔐 API CREDENTIALS (after account setup):`);\n    for (const field of requirements.requiredFields) {\n      if (field.key.includes('Token') || field.key.includes('Secret') || field.key.includes('Password')) {\n        const value = await this.askField({\n          ...field,\n          description: field.description + ' (from account settings after setup)'\n        });\n        template.customFields = template.customFields || {};\n        template.customFields[field.key] = value;\n      }\n    }\n\n    // Save completed account\n    this.signupManager.saveCompletedAccount(platform, template.customFields || {});\n\n    console.log(`✅ ${requirements.displayName} account configured and saved!`);\n  }\n\n  private async askField(field: any): Promise<string> {\n    return new Promise((resolve) => {\n      const isPiped = this.isPipedInput();\n\n      if (!isPiped) {\n        const prompt = (field.sensitive || field.type === 'password') ? '(hidden) ' : '';\n        const maxNote = field.maxLength ? ` (max ${field.maxLength} chars)` : '';\n        const requiredNote = field.required ? ' *' : '';\n\n        console.log(`\\n${field.label}${requiredNote}${maxNote}`);\n        if (field.description) {\n          console.log(`   ${field.description}`);\n        }\n        if (field.type === 'select' && field.options) {\n          console.log(`   Options: ${field.options.join(', ')}`);\n        }\n      }\n\n      // For password fields, hide input\n      if (field.type === 'password' && !isPiped) {\n        // Use a different readline interface for password input\n        const { createInterface } = require('readline');\n        const passwordRl = createInterface({\n          input: process.stdin,\n          output: process.stdout,\n          terminal: true\n        });\n\n        passwordRl.question('> ', (answer: string) => {\n          passwordRl.close();\n          resolve(answer);\n        });\n\n        // Hide password input by intercepting stdout\n        const stdout = process.stdout;\n        let muted = false;\n        const oldWrite = stdout.write;\n        stdout.write = function(chunk: any, encoding?: any, callback?: any) {\n          if (!muted && chunk === '> ') {\n            muted = true;\n            oldWrite.call(this, chunk, encoding, callback);\n          } else if (muted && chunk === '\\n') {\n            muted = false;\n            oldWrite.call(this, chunk, encoding, callback);\n          } else if (muted) {\n            // Don't show the actual password characters\n            oldWrite.call(this, '*', encoding, callback);\n          } else {\n            oldWrite.call(this, chunk, encoding, callback);\n          }\n          return true;\n        };\n\n        passwordRl.on('close', () => {\n          stdout.write = oldWrite;\n        });\n      } else {\n        this.rl.question(isPiped ? '' : '> ', (answer) => {\n          // Validate answer\n          if (!answer && field.required) {\n            if (!isPiped) console.log(`❌ ${field.label} is required.`);\n            resolve(this.askField(field));\n            return;\n          }\n\n          if (answer && field.validation) {\n            const validationResult = field.validation(answer);\n            if (validationResult !== true) {\n              if (!isPiped) console.log(`❌ ${validationResult}`);\n              resolve(this.askField(field));\n              return;\n            }\n          }\n\n          if (answer && field.maxLength && answer.length > field.maxLength) {\n            if (!isPiped) console.log(`❌ Too long! Maximum ${field.maxLength} characters.`);\n            resolve(this.askField(field));\n            return;\n          }\n\n          resolve(answer);\n        });\n      }\n    });\n  }\n\n  private async askFieldWithDefault(field: any & { defaultValue?: string }): Promise<string> {\n    return new Promise((resolve) => {\n      const isPiped = this.isPipedInput();\n\n      if (!isPiped) {\n        const prompt = field.sensitive ? '(hidden) ' : '';\n        const maxNote = field.maxLength ? ` (max ${field.maxLength} chars)` : '';\n        const requiredNote = field.required ? ' *' : '';\n        const defaultNote = field.defaultValue ? ` [${colors.green}${field.defaultValue}${colors.reset}]` : '';\n\n        console.log(`\\n${colors.bright}${field.label}${colors.reset}${defaultNote}${requiredNote}${maxNote}`);\n        if (field.description) {\n          console.log(`   ${colors.dim}${field.description}${colors.reset}`);\n        }\n        if (field.type === 'select' && field.options) {\n          console.log(`   Options: ${field.options.join(', ')}`);\n        }\n      }\n\n      this.rl.question(isPiped ? '' : '> ', (answer) => {\n        const finalAnswer = answer.trim() || field.defaultValue || '';\n\n        // Validate answer\n        if (!finalAnswer && field.required) {\n          if (!isPiped) console.log(`${colors.red}❌ ${field.label} is required.${colors.reset}`);\n          resolve(this.askFieldWithDefault(field));\n          return;\n        }\n\n        if (finalAnswer && field.validation) {\n          const validationResult = field.validation(finalAnswer);\n          if (validationResult !== true) {\n            if (!isPiped) console.log(`${colors.red}❌ ${validationResult}${colors.reset}`);\n            resolve(this.askFieldWithDefault(field));\n            return;\n          }\n        }\n\n        if (finalAnswer && field.maxLength && finalAnswer.length > field.maxLength) {\n          if (!isPiped) console.log(`${colors.red}❌ Too long! Maximum ${field.maxLength} characters.${colors.reset}`);\n          resolve(this.askFieldWithDefault(field));\n          return;\n        }\n\n        resolve(finalAnswer);\n      });\n    });\n  }\n\n  private async askYesNo(question: string): Promise<boolean> {\n    return new Promise((resolve) => {\n      const isPiped = this.isPipedInput();\n      this.rl.question(isPiped ? '' : `${question} (y/N): `, (answer) => {\n        resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes');\n      });\n    });\n  }\n\n}\n\nexport { HyperPostSetup };\n","import { Command } from 'commander';\nimport { HyperPost } from './HyperPost';\nimport { SocialPost } from './types';\nimport { SignupManager } from './signup-manager';\nimport { prisma } from './database';\nimport * as crypto from 'crypto';\n\nconst program = new Command();\n\nprogram\n  .name('hyper-post')\n  .description('A unified social media posting tool for underground platforms')\n  .version('0.1.0');\n\nprogram\n  .command('post')\n  .description('Post content to social media platforms')\n  .requiredOption('-c, --content <content>', 'Post content')\n  .option('-t, --title <title>', 'Post title')\n  .option('-u, --url <url>', 'URL to include')\n  .option('--tags <tags>', 'Comma-separated tags')\n  .option('-p, --platforms <platforms>', 'Comma-separated list of platforms (defaults to all configured)')\n  .option('--dry-run', 'Preview the post without actually posting (recommended for testing)')\n  .action(async (options) => {\n    try {\n      const credentials = loadCredentials();\n      const hyperPost = new HyperPost(credentials);\n\n      const post: SocialPost = {\n        content: options.content,\n        title: options.title,\n        url: options.url,\n        tags: options.tags ? options.tags.split(',').map((tag: string) => tag.trim()) : undefined\n      };\n\n      if (options.dryRun) {\n        console.log('🔍 Dry run mode - previewing post:');\n        console.log('=' .repeat(50));\n        console.log(`Content: ${post.content}`);\n        if (post.title) console.log(`Title: ${post.title}`);\n        if (post.url) console.log(`URL: ${post.url}`);\n        if (post.tags) console.log(`Tags: ${post.tags.join(', ')}`);\n        console.log('');\n\n        let targetPlatforms: string[];\n        if (options.platforms) {\n          targetPlatforms = options.platforms.split(',').map((p: string) => p.trim());\n          // Validate that specified platforms are configured\n          const configuredPlatforms = hyperPost.getConfiguredPlatforms();\n          const invalidPlatforms = targetPlatforms.filter(p => !configuredPlatforms.includes(p));\n          if (invalidPlatforms.length > 0) {\n            console.error(`❌ Invalid platforms: ${invalidPlatforms.join(', ')}`);\n            console.error(`Configured platforms: ${configuredPlatforms.join(', ')}`);\n            process.exit(1);\n          }\n        } else {\n          targetPlatforms = hyperPost.getConfiguredPlatforms();\n        }\n\n        console.log(`Will post to: ${targetPlatforms.join(', ')}`);\n        console.log('');\n        console.log('💡 Remove --dry-run to actually post');\n        return;\n      }\n\n      let result;\n\n      if (options.platforms) {\n        const platforms = options.platforms.split(',').map((p: string) => p.trim());\n        result = await hyperPost.postToPlatforms(platforms as any, post);\n      } else {\n        result = await hyperPost.postToAll(post);\n      }\n\n      console.log('📤 Posting results:');\n      console.log(`✅ Successful: ${result.successful}`);\n      console.log(`❌ Failed: ${result.failed}`);\n      console.log('');\n\n      result.results.forEach(r => {\n        if (r.success) {\n          console.log(`✅ ${r.platform}: ${r.url || 'Posted successfully'}`);\n        } else {\n          console.log(`❌ ${r.platform}: ${r.error}`);\n        }\n      });\n\n    } catch (error) {\n      console.error('Error:', error instanceof Error ? error.message : 'Unknown error');\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('platforms')\n  .description('List and test configured platforms')\n  .option('--test', 'Test credentials for each platform')\n  .option('--platform <platform>', 'Test only a specific platform')\n  .action(async (options) => {\n    try {\n      const credentials = loadCredentials();\n      const hyperPost = new HyperPost(credentials);\n\n      const platforms = hyperPost.getConfiguredPlatforms();\n\n      if (platforms.length === 0) {\n        console.log('No platforms configured. Run setup to configure platforms.');\n        console.log('Run \"hyper-post setup\" to configure platforms interactively.');\n        return;\n      }\n\n      let platformsToTest = platforms;\n      if (options.platform) {\n        if (!platforms.includes(options.platform)) {\n          console.error(`❌ Platform '${options.platform}' is not configured.`);\n          console.log('Available platforms:', platforms.join(', '));\n          process.exit(1);\n        }\n        platformsToTest = [options.platform];\n      }\n\n      if (options.test) {\n        console.log('🧪 Testing credentials for platforms...\\n');\n\n        for (const platformName of platformsToTest) {\n          try {\n            const platform = hyperPost.getPlatform(platformName);\n            if (!platform) {\n              console.log(`❌ ${platformName}: Platform class not found`);\n              continue;\n            }\n\n            // Test basic credential validation\n            platform.validateCredentials();\n\n            // Try a simple API call to test connectivity (this would be platform-specific)\n            // For now, just validate that credentials are present and properly formatted\n            console.log(`✅ ${platformName}: Credentials validated`);\n          } catch (error) {\n            console.log(`❌ ${platformName}: ${error instanceof Error ? error.message : 'Validation failed'}`);\n          }\n        }\n\n        console.log('\\n💡 Note: Full API connectivity tests would require actual API calls.');\n        console.log('   Use --dry-run with the post command for more comprehensive testing.');\n      } else {\n        console.log('Configured platforms:');\n        platformsToTest.forEach(platform => {\n          console.log(`- ${platform}`);\n        });\n\n        if (platformsToTest.length > 0) {\n          console.log('\\n💡 Use --test to validate credentials, or --platform <name> --test to test a specific platform.');\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error instanceof Error ? error.message : 'Unknown error');\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('setup')\n  .description('Interactive setup wizard for configuring social media platforms')\n  .action(async () => {\n    // Import and run setup\n    const { HyperPostSetup } = await import('./setup');\n    const setup = new HyperPostSetup();\n    await setup.run();\n  });\n\nprogram\n  .command('test-post <platform>')\n  .description('Test posting to a specific platform (dry run)')\n  .option('-c, --content <content>', 'Post content')\n  .option('-t, --title <title>', 'Post title')\n  .option('-u, --url <url>', 'URL to include')\n  .option('--tags <tags>', 'Comma-separated tags')\n  .action(async (platformName, options) => {\n    try {\n      const credentials = loadCredentials();\n      const hyperPost = new HyperPost(credentials);\n\n      if (!hyperPost.isPlatformConfigured(platformName as any)) {\n        console.error(`❌ Platform '${platformName}' is not configured.`);\n        console.log('Run \"hyper-post platforms\" to see configured platforms.');\n        process.exit(1);\n      }\n\n      const post: SocialPost = {\n        content: options.content || 'Test post from HyperPost CLI',\n        title: options.title,\n        url: options.url,\n        tags: options.tags ? options.tags.split(',').map((tag: string) => tag.trim()) : undefined\n      };\n\n      console.log(`🧪 Testing post to ${platformName}...`);\n      console.log('=' .repeat(50));\n      console.log(`Content: ${post.content}`);\n      if (post.title) console.log(`Title: ${post.title}`);\n      if (post.url) console.log(`URL: ${post.url}`);\n      if (post.tags) console.log(`Tags: ${post.tags.join(', ')}`);\n      console.log('=' .repeat(50));\n\n      // Test credentials first\n      try {\n        const platform = hyperPost.getPlatform(platformName);\n        platform?.validateCredentials();\n        console.log(`✅ ${platformName}: Credentials validated`);\n      } catch (error) {\n        console.log(`❌ ${platformName}: ${error instanceof Error ? error.message : 'Credential validation failed'}`);\n        process.exit(1);\n      }\n\n      // Perform dry run post\n      const result = await hyperPost.postToPlatforms([platformName as any], post);\n\n      console.log(`📊 Results: ${result.successful} successful, ${result.failed} failed`);\n\n      if (result.successful > 0) {\n        console.log(`✅ ${platformName}: Post test successful!`);\n        if (result.results?.[0]?.url) {\n          console.log(`🔗 Would post to: ${result.results[0].url}`);\n        }\n      } else {\n        console.log(`❌ ${platformName}: Post test failed`);\n        // Check if there are any results with errors\n        if (result.results && result.results.length > 0) {\n          const failedResult = result.results.find(r => !r.success);\n          if (failedResult) {\n            console.log(`Error: ${failedResult.error || 'Unknown error'}`);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error instanceof Error ? error.message : 'Unknown error');\n      process.exit(1);\n    }\n  });\n\nfunction loadCredentials(): any {\n  const credentials: any = {};\n\n  // Load from SignupManager (persistent data from ~/.config/hyper-post/)\n  const signupManager = new SignupManager();\n  const completedAccounts = signupManager.getAllCompletedAccounts();\n\n  for (const [platform, accountData] of Object.entries(completedAccounts)) {\n    credentials[platform] = accountData;\n  }\n\n  return credentials;\n}\n\nprogram\n  .command('history')\n  .description('Show posting history and check for duplicates')\n  .option('--clear', 'Clear the posting history')\n  .option('--platform <platform>', 'Filter history by platform')\n  .option('--limit <number>', 'Limit number of results', '50')\n  .action(async (options) => {\n    try {\n      const credentials = loadCredentials();\n      const hyperPost = new HyperPost(credentials);\n\n      if (options.clear) {\n        await hyperPost.clearPostedContentHistory();\n        return;\n      }\n\n      const history = await hyperPost.getPostedContentHistory(parseInt(options.limit) || 50);\n\n      if (history.length === 0) {\n        console.log('No posting history found.');\n        return;\n      }\n\n      let filteredHistory = history;\n      if (options.platform) {\n        filteredHistory = history.filter(item => item.platforms.includes(options.platform));\n      }\n\n      console.log(`📚 Posting History (${filteredHistory.length} entries):`);\n      console.log('=' .repeat(60));\n\n      filteredHistory.forEach((item, index) => {\n        const date = new Date(item.timestamp).toLocaleString();\n        console.log(`${index + 1}. [${date}]`);\n        console.log(`   Platforms: ${item.platforms.join(', ')}`);\n        if (item.title) console.log(`   Title: ${item.title}`);\n        console.log(`   Content: ${item.content.substring(0, 100)}${item.content.length > 100 ? '...' : ''}`);\n        if (item.postUrls && item.postUrls.length > 0) {\n          console.log(`   URLs:`);\n          item.postUrls.forEach((url: any) => {\n            console.log(`     ${url.platform}: ${url.url}`);\n          });\n        }\n        console.log(`   Hash: ${item.contentHash.substring(0, 16)}...`);\n        console.log('');\n      });\n\n    } catch (error) {\n      console.error('Error:', error instanceof Error ? error.message : 'Unknown error');\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('analytics')\n  .description('Show posting analytics (cached data from database)')\n  .option('--platform <platform>', 'Filter analytics by platform')\n  .option('--days <number>', 'Number of days to analyze', '30')\n  .action(async (options) => {\n    try {\n      const credentials = loadCredentials();\n      const hyperPost = new HyperPost(credentials);\n\n      const analytics = await hyperPost.getPostingAnalytics(\n        options.platform,\n        parseInt(options.days) || 30\n      );\n\n      console.log(`📊 Posting Analytics (${options.days} days - cached data):`);\n      console.log('=' .repeat(60));\n      console.log(`Total Posts: ${analytics.totalPosts}`);\n      console.log('');\n\n      if (Object.keys(analytics.byPlatform).length > 0) {\n        console.log('Posts by Platform:');\n        Object.entries(analytics.byPlatform).forEach(([platform, count]) => {\n          console.log(`  ${platform}: ${count}`);\n        });\n        console.log('');\n      }\n\n      if (analytics.recentPosts.length > 0) {\n        console.log('Recent Posts:');\n        analytics.recentPosts.slice(0, 5).forEach((post: any, index: number) => {\n          const date = post.postedAt.toLocaleString();\n          console.log(`${index + 1}. [${date}] ${post.platform.name}: ${post.post.title || post.post.content.substring(0, 50)}...`);\n        });\n        console.log('');\n      }\n\n      if (analytics.engagementData.length > 0) {\n        console.log('Engagement Data (likes, reposts, etc.):');\n        analytics.engagementData.slice(0, 5).forEach((item: any, index: number) => {\n          const metrics = Object.entries(item.metrics)\n            .map(([key, value]) => `${key}: ${value}`)\n            .join(', ');\n          console.log(`${index + 1}. ${item.platform}: ${metrics || 'No engagement data'} - ${item.postTitle || 'Untitled'}`);\n        });\n      }\n\n      console.log('');\n      console.log('💡 Tip: Use \"hyper-post gather-analytics\" to fetch fresh engagement data from platforms!');\n\n    } catch (error) {\n      console.error('Error:', error instanceof Error ? error.message : 'Unknown error');\n      console.log('');\n      console.log('💡 Tip: Make sure your DATABASE_URL is properly configured for PostgreSQL.');\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('gather-analytics')\n  .description('Fetch fresh engagement metrics (likes/faves/reposts) from all platforms')\n  .action(async () => {\n    try {\n      const credentials = loadCredentials();\n      const hyperPost = new HyperPost(credentials);\n\n      console.log('🔍 Gathering fresh analytics from platforms...');\n      console.log('This fetches likes, reposts, replies, and other engagement data.');\n      console.log('This may take a while depending on the number of posts.');\n      console.log('');\n\n      const results = await hyperPost.gatherAnalyticsForAllPosts();\n\n      console.log(`📊 Analytics Gathering Complete:`);\n      console.log('=' .repeat(50));\n      console.log(`Posts Processed: ${results.processed}`);\n      console.log(`Posts Updated: ${results.updated}`);\n      console.log('');\n\n      if (results.results.length > 0) {\n        console.log('Results:');\n        results.results.forEach((result: any, index: number) => {\n          if (result.success) {\n            const metrics = Object.entries(result.analytics)\n              .map(([key, value]) => `${key}: ${value}`)\n              .join(', ');\n            console.log(`✅ ${result.platform}: ${metrics || 'No engagement data'}`);\n          } else {\n            console.log(`❌ ${result.platform}: ${result.error}`);\n          }\n        });\n      }\n\n      console.log('');\n      console.log('💡 Tip: Run \"hyper-post analytics\" to see updated engagement data!');\n\n    } catch (error) {\n      console.error('Error:', error instanceof Error ? error.message : 'Unknown error');\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('discover-posts')\n  .description('Discover existing posts on platforms with their analytics')\n  .option('--platform <platform>', 'Limit discovery to specific platform')\n  .option('--limit <number>', 'Number of posts to discover per platform', '10')\n  .action(async (options) => {\n    try {\n      const credentials = loadCredentials();\n      const hyperPost = new HyperPost(credentials);\n\n      console.log('🔍 Discovering posts on platforms...');\n      console.log('This finds existing posts and shows their current engagement metrics.');\n      console.log('');\n\n      const limit = parseInt(options.limit) || 10;\n      const allPosts: any[] = [];\n\n      // Get configured platforms\n      const configuredPlatforms = hyperPost.getConfiguredPlatforms();\n\n      for (const platformName of configuredPlatforms) {\n        if (options.platform && options.platform !== platformName) {\n          continue; // Skip if filtering by platform\n        }\n\n        try {\n          const platform = hyperPost.getPlatform(platformName);\n          if (!platform || !platform.discoverPosts) {\n            console.log(`⚠️  ${platformName}: Post discovery not supported`);\n            continue;\n          }\n\n          console.log(`📡 Checking ${platformName}...`);\n          const posts = await platform.discoverPosts(limit);\n\n          if (posts.length > 0) {\n            console.log(`✅ Found ${posts.length} posts on ${platformName}`);\n            allPosts.push(...posts.map(post => ({ ...post, platform: platformName })));\n          } else {\n            console.log(`📭 No posts found on ${platformName}`);\n          }\n\n          // Small delay to avoid rate limiting\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n        } catch (error) {\n          console.log(`❌ ${platformName}: Failed to discover posts - ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n      console.log('');\n      console.log(`📊 Discovery Complete:`);\n      console.log('=' .repeat(50));\n      console.log(`Total Posts Found: ${allPosts.length}`);\n      console.log('');\n\n      if (allPosts.length > 0) {\n        console.log('Posts with Analytics:');\n        console.log('=' .repeat(50));\n\n        allPosts.forEach((post, index) => {\n          const date = post.createdAt.toLocaleString();\n          const metrics = Object.entries(post.analytics)\n            .filter(([key, value]) => typeof value === 'number' && value > 0)\n            .map(([key, value]) => `${key}: ${value}`)\n            .join(', ') || 'No engagement yet';\n\n          console.log(`${index + 1}. [${date}] ${post.platform.toUpperCase()}`);\n          console.log(`   URL: ${post.url}`);\n          console.log(`   Content: ${post.content.substring(0, 100)}${post.content.length > 100 ? '...' : ''}`);\n          console.log(`   Analytics: ${metrics}`);\n          console.log('');\n        });\n\n        console.log('💡 Tip: Use \"hyper-post import-post <url>\" to add these posts to analytics tracking!');\n      } else {\n        console.log('No posts found on any platforms.');\n        console.log('This could mean:');\n        console.log('- No posts exist on the platforms');\n        console.log('- Platform APIs are rate limited');\n        console.log('- Authentication issues');\n      }\n\n    } catch (error) {\n      console.error('Error:', error instanceof Error ? error.message : 'Unknown error');\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('import-post <url>')\n  .description('Import an existing post by URL for analytics tracking')\n  .action(async (url) => {\n    try {\n      const credentials = loadCredentials();\n      const hyperPost = new HyperPost(credentials);\n\n      console.log(`📥 Importing post: ${url}`);\n      console.log('This will add the post to the database and start tracking its analytics.');\n      console.log('');\n\n      // Determine platform from URL\n      let platformName = '';\n      if (url.includes('mastodon.social')) {\n        platformName = 'mastodon';\n      } else if (url.includes('bsky.app')) {\n        platformName = 'bluesky';\n      } else if (url.includes('reddit.com')) {\n        platformName = 'reddit';\n      } else if (url.includes('discord.com')) {\n        platformName = 'discord';\n      }\n\n      if (!platformName) {\n        console.error('❌ Could not determine platform from URL');\n        console.log('Supported platforms: Mastodon, Bluesky, Reddit, Discord');\n        process.exit(1);\n      }\n\n      if (!hyperPost.isPlatformConfigured(platformName as any)) {\n        console.error(`❌ ${platformName} is not configured in your credentials`);\n        process.exit(1);\n      }\n\n      // Get platform instance\n      const platform = hyperPost.getPlatform(platformName);\n      if (!platform) {\n        console.error(`❌ Could not get ${platformName} platform instance`);\n        process.exit(1);\n      }\n\n      // Get post data and analytics\n      console.log(`🔍 Gathering analytics for ${platformName} post...`);\n      const analytics = await platform.gatherAnalytics(url);\n\n      // Try to get post details from the platform's discoverPosts method\n      // by fetching recent posts and finding the matching URL\n      let postDetails: any = null;\n      try {\n        const recentPosts = await platform.discoverPosts(50); // Get more posts to find the right one\n        postDetails = recentPosts.find(post => post.url === url);\n      } catch (error) {\n        console.warn('Could not fetch post details, using basic import');\n      }\n\n      if (!postDetails) {\n        console.error('❌ Could not find post details. The post may not exist or the platform API is not accessible.');\n        process.exit(1);\n      }\n\n      // Directly import the post to the database (bypass deduplication for imports)\n      try {\n        const { prisma } = await import('./database');\n\n        // Get platform from database\n        const dbPlatform = await prisma.platform.findUnique({\n          where: { name: platformName }\n        });\n\n        if (!dbPlatform) {\n          console.error(`❌ Platform ${platformName} not found in database`);\n          process.exit(1);\n        }\n\n        // Create the post with actual content\n        const contentHash = crypto.createHash('sha256').update(postDetails.content + url).digest('hex');\n\n        const post = await prisma.post.upsert({\n          where: { contentHash },\n          update: {\n            title: postDetails.content.split('\\n')[0].substring(0, 200), // First line as title\n            content: postDetails.content,\n            url: url\n          },\n          create: {\n            contentHash,\n            title: postDetails.content.split('\\n')[0].substring(0, 200),\n            content: postDetails.content,\n            url: url\n          }\n        });\n\n        // Create the post-platform relationship\n        await prisma.postPlatform.upsert({\n          where: {\n            postId_platformId: {\n              postId: post.id,\n              platformId: dbPlatform.id\n            }\n          },\n          update: {\n            postUrl: url\n          },\n          create: {\n            postId: post.id,\n            platformId: dbPlatform.id,\n            postUrl: url,\n            postedAt: postDetails.createdAt || new Date()\n          }\n        });\n\n        console.log(`✅ Post imported to database successfully!`);\n        console.log(`📊 Current analytics: ${Object.entries(analytics).map(([k, v]) => `${k}: ${v}`).join(', ') || 'None yet'}`);\n        console.log('');\n        console.log('💡 Tip: Run \"hyper-post gather-analytics\" periodically to update analytics!');\n\n      } catch (dbError) {\n        console.error('❌ Failed to import post to database:', dbError);\n        process.exit(1);\n      }\n\n    } catch (error) {\n      console.error('Error:', error instanceof Error ? error.message : 'Unknown error');\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('repost')\n  .description('Repost existing content to additional platforms')\n  .option('-p, --platforms <platforms>', 'Comma-separated list of platforms to repost to')\n  .option('--all', 'Repost all existing posts to specified platforms (requires --batch)')\n  .option('--batch', 'Enable batch mode with 5-minute delays between posts')\n  .option('--hash <hash>', 'Repost specific post by content hash')\n  .option('--dry-run', 'Preview reposts without actually posting')\n  .action(async (options) => {\n    try {\n      const credentials = loadCredentials();\n      const hyperPost = new HyperPost(credentials);\n\n      if (!options.platforms) {\n        console.error('❌ Please specify platforms with -p or --platforms');\n        console.error('Examples:');\n        console.error('  hyper-post repost --platforms devto --hash <hash>     # Single post');\n        console.error('  hyper-post repost --platforms devto --batch --all    # Batch mode');\n        process.exit(1);\n      }\n\n      const targetPlatforms = options.platforms.split(',').map((p: string) => p.trim());\n\n      // Validate platforms\n      const configuredPlatforms = hyperPost.getConfiguredPlatforms();\n      const invalidPlatforms = targetPlatforms.filter((p: string) => !configuredPlatforms.includes(p));\n      if (invalidPlatforms.length > 0) {\n        console.error(`❌ Invalid platforms: ${invalidPlatforms.join(', ')}`);\n        console.error(`Configured platforms: ${configuredPlatforms.join(', ')}`);\n        process.exit(1);\n      }\n\n      let postsToRepost: any[] = [];\n\n      if (options.all) {\n        if (!options.batch) {\n          console.error('❌ --all requires --batch flag for safety');\n          console.error('Use --batch to enable posting multiple posts with delays');\n          console.error('Or use --hash to repost a specific post');\n          process.exit(1);\n        }\n\n        // Get all posts from database\n        const allPosts = await prisma.post.findMany({\n          include: {\n            postPlatforms: {\n              include: {\n                platform: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: 'desc'\n          }\n        });\n\n        // Filter out posts that have already been posted to target platforms\n        postsToRepost = allPosts.filter((post: any) => {\n          const postedPlatforms = post.postPlatforms.map((pp: any) => pp.platform.name);\n          return !targetPlatforms.every((platform: string) => postedPlatforms.includes(platform));\n        });\n\n      } else if (options.hash) {\n        // Find specific post by hash\n        const post = await prisma.post.findUnique({\n          where: { contentHash: options.hash },\n          include: {\n            postPlatforms: {\n              include: {\n                platform: true\n              }\n            }\n          }\n        });\n\n        if (!post) {\n          console.error(`❌ Post with hash ${options.hash} not found`);\n          process.exit(1);\n        }\n\n        const postedPlatforms = post.postPlatforms.map((pp: any) => pp.platform.name);\n        const needsRepost = !targetPlatforms.every((platform: string) => postedPlatforms.includes(platform));\n\n        if (!needsRepost) {\n          console.log(`ℹ️ Post ${options.hash} has already been posted to all target platforms`);\n          return;\n        }\n\n        postsToRepost = [post];\n      } else {\n        console.error('❌ Please specify --all (with --batch) or --hash <hash>');\n        console.error('Examples:');\n        console.error('  hyper-post repost --platforms devto --batch --all  # Batch mode with delays');\n        console.error('  hyper-post repost --platforms devto --hash abc123...  # Single post');\n        process.exit(1);\n      }\n\n      if (postsToRepost.length === 0) {\n        console.log('ℹ️ No posts need reposting to the specified platforms');\n        return;\n      }\n\n      console.log(`🔄 Found ${postsToRepost.length} post(s) to repost to: ${targetPlatforms.join(', ')}`);\n      if (options.batch && postsToRepost.length > 1) {\n        console.log(`⏰ Batch mode: 5-minute delays between posts`);\n      }\n      console.log('');\n\n      for (let i = 0; i < postsToRepost.length; i++) {\n        const post = postsToRepost[i];\n\n        // Show progress in batch mode\n        if (options.batch && postsToRepost.length > 1) {\n          console.log(`📦 Batch Progress: ${i + 1}/${postsToRepost.length}`);\n        }\n\n        console.log(`📝 Reposting: ${post.title || post.content.substring(0, 50)}${post.title ? '' : '...'}`);\n        console.log(`   Hash: ${post.contentHash}`);\n        console.log(`   Created: ${post.createdAt.toLocaleString()}`);\n\n        const socialPost: SocialPost = {\n          content: post.content,\n          title: post.title,\n          url: post.url\n        };\n\n        if (options.dryRun) {\n          console.log(`   🔍 Would post to: ${targetPlatforms.join(', ')}`);\n        } else {\n          try {\n            const result = await hyperPost.postToPlatforms(targetPlatforms, socialPost);\n            console.log(`   ✅ Results: ${result.successful} successful, ${result.failed} failed`);\n            result.results.forEach(r => {\n              if (r.success) {\n                console.log(`     ✅ ${r.platform}: ${r.url || 'Posted successfully'}`);\n              } else {\n                console.log(`     ❌ ${r.platform}: ${r.error}`);\n              }\n            });\n          } catch (error) {\n            console.log(`   ❌ Failed to repost: ${error instanceof Error ? error.message : 'Unknown error'}`);\n          }\n        }\n        console.log('');\n\n        // Add 5-minute delay between posts in batch mode (except for the last post)\n        if (options.batch && i < postsToRepost.length - 1) {\n          console.log(`⏳ Waiting 5 minutes before next post...`);\n          await new Promise(resolve => setTimeout(resolve, 5 * 60 * 1000)); // 5 minutes\n          console.log(`🚀 Continuing with next post...\\n`);\n        }\n      }\n\n      if (options.dryRun) {\n        console.log('💡 Remove --dry-run to actually repost');\n      }\n\n    } catch (error) {\n      console.error('Error:', error instanceof Error ? error.message : 'Unknown error');\n      process.exit(1);\n    }\n  });\n\nprogram.parse();\n","import { SocialPost, PostingResult, PlatformCredentials } from '../types';\n\nexport interface PostAnalytics {\n  likes?: number;\n  reposts?: number;\n  replies?: number;\n  views?: number;\n  bookmarks?: number;\n  [key: string]: number | undefined;\n}\n\nexport abstract class BasePlatform {\n  protected credentials: Record<string, string>;\n\n  constructor(credentials: Record<string, string>) {\n    this.credentials = credentials;\n  }\n\n  abstract get name(): string;\n  abstract get displayName(): string;\n\n  abstract post(content: SocialPost): Promise<PostingResult>;\n\n  /**\n   * Gather analytics for a specific post URL\n   * Returns available metrics (likes, reposts, replies, views, etc.)\n   */\n  abstract gatherAnalytics(postUrl: string): Promise<PostAnalytics>;\n\n  /**\n   * Discover recent posts from the user's account on this platform\n   * Returns posts with their current analytics\n   */\n  abstract discoverPosts(limit?: number): Promise<Array<{url: string, content: string, createdAt: Date, analytics: PostAnalytics}>>;\n\n  public validateCredentials(): void {\n    const requiredFields = this.getRequiredCredentials();\n    const missing = requiredFields.filter(field => !this.credentials[field]);\n\n    if (missing.length > 0) {\n      throw new Error(`Missing required credentials for ${this.displayName}: ${missing.join(', ')}`);\n    }\n  }\n\n  protected abstract getRequiredCredentials(): string[];\n\n  protected createResult(\n    success: boolean,\n    postId?: string,\n    url?: string,\n    error?: string\n  ): PostingResult {\n    return {\n      platform: this.name,\n      success,\n      postId,\n      url,\n      error\n    };\n  }\n}\n","import { BasePlatform, PostAnalytics } from './BasePlatform';\nimport { SocialPost, PostingResult } from '../types';\nconst Mastodon = require('mastodon-api');\n\nexport class MastodonPlatform extends BasePlatform {\n  get name(): string {\n    return 'mastodon';\n  }\n\n  get displayName(): string {\n    return 'Mastodon';\n  }\n\n  protected getRequiredCredentials(): string[] {\n    return ['instance', 'accessToken'];\n  }\n\n  async post(content: SocialPost): Promise<PostingResult> {\n    try {\n      this.validateCredentials();\n\n      const { instance, accessToken } = this.credentials;\n\n      // Initialize Mastodon API client\n      const client = new Mastodon({\n        access_token: accessToken,\n        api_url: `https://${instance}/api/v1/`\n      });\n\n      // Prepare the post content\n      let status = content.content;\n\n      if (content.title) {\n        status = `${content.title}\\n\\n${content.content}`;\n      }\n\n      // Add URL if provided\n      if (content.url) {\n        status += `\\n\\n${content.url}`;\n      }\n\n      // Add tags\n      if (content.tags && content.tags.length > 0) {\n        const tagString = content.tags.map(tag => `#${tag}`).join(' ');\n        status += `\\n\\n${tagString}`;\n      }\n\n      // Post to Mastodon\n      const response = await client.post('statuses', {\n        status,\n        visibility: 'public'\n      });\n\n      return this.createResult(\n        true,\n        response.data.id,\n        response.data.url\n      );\n\n    } catch (error) {\n      return this.createResult(\n        false,\n        undefined,\n        undefined,\n        error instanceof Error ? error.message : 'Unknown error'\n      );\n    }\n  }\n\n  async gatherAnalytics(postUrl: string): Promise<PostAnalytics> {\n    try {\n      this.validateCredentials();\n\n      const { instance, accessToken } = this.credentials;\n\n      // Extract status ID from Mastodon URL\n      // URL format: https://instance.com/@username/statusId\n      const urlMatch = postUrl.match(/\\/@[^\\/]+\\/(\\d+)/);\n      if (!urlMatch) {\n        throw new Error(`Invalid Mastodon URL format: ${postUrl}`);\n      }\n\n      const statusId = urlMatch[1];\n\n      // Initialize Mastodon API client\n      const client = new Mastodon({\n        access_token: accessToken,\n        api_url: `https://${instance}/api/v1/`\n      });\n\n      // Get status information\n      const response = await client.get(`statuses/${statusId}`);\n\n      const status = response.data;\n\n      return {\n        likes: status.favourites_count || 0,\n        reposts: status.reblogs_count || 0,\n        replies: status.replies_count || 0,\n        bookmarks: status.bookmarks_count || 0\n      };\n\n    } catch (error) {\n      console.warn(`Failed to gather Mastodon analytics for ${postUrl}:`, error);\n      return {};\n    }\n  }\n\n  /**\n   * Discover recent posts from the user's account\n   */\n  async discoverPosts(limit: number = 20): Promise<Array<{url: string, content: string, createdAt: Date, analytics: PostAnalytics}>> {\n    try {\n      this.validateCredentials();\n\n      const { instance, accessToken } = this.credentials;\n\n      // Initialize Mastodon API client\n      const client = new Mastodon({\n        access_token: accessToken,\n        api_url: `https://${instance}/api/v1/`\n      });\n\n      // Get user's account information first\n      const accountResponse = await client.get('accounts/verify_credentials');\n      const account = accountResponse.data;\n\n      // Get recent posts from the user's account\n      const statusesResponse = await client.get(`accounts/${account.id}/statuses`, {\n        limit: limit\n      });\n\n      const posts = statusesResponse.data.map((status: any) => ({\n        url: status.url,\n        content: status.content.replace(/<[^>]*>/g, ''), // Remove HTML tags\n        createdAt: new Date(status.created_at),\n        analytics: {\n          likes: status.favourites_count || 0,\n          reposts: status.reblogs_count || 0,\n          replies: status.replies_count || 0,\n          bookmarks: status.bookmarks_count || 0\n        }\n      }));\n\n      return posts;\n\n    } catch (error) {\n      console.warn(`Failed to discover Mastodon posts:`, error);\n      return [];\n    }\n  }\n}\n","import { BasePlatform, PostAnalytics } from './BasePlatform';\nimport { SocialPost, PostingResult } from '../types';\nimport { BskyAgent, RichText } from '@atproto/api';\n\nexport class BlueskyPlatform extends BasePlatform {\n  private agent: BskyAgent;\n\n  constructor(credentials: Record<string, string>) {\n    super(credentials);\n    this.agent = new BskyAgent({ service: 'https://bsky.social' });\n  }\n\n  get name(): string {\n    return 'bluesky';\n  }\n\n  get displayName(): string {\n    return 'Bluesky';\n  }\n\n  protected getRequiredCredentials(): string[] {\n    return ['identifier', 'password'];\n  }\n\n  async post(content: SocialPost): Promise<PostingResult> {\n    try {\n      this.validateCredentials();\n\n      const { identifier, password } = this.credentials;\n\n      // Login to Bluesky\n      await this.agent.login({\n        identifier,\n        password\n      });\n\n      // Prepare the post content\n      let postText = content.content;\n\n      if (content.title) {\n        postText = `${content.title}\\n\\n${content.content}`;\n      }\n\n      // Create rich text for better formatting\n      const rt = new RichText({ text: postText });\n      await rt.detectFacets(this.agent);\n\n      const postData: any = {\n        text: rt.text,\n        facets: rt.facets\n      };\n\n      // Add embed if URL is provided\n      if (content.url) {\n        postData.embed = {\n          $type: 'app.bsky.embed.external',\n          external: {\n            uri: content.url,\n            title: content.title || 'Link',\n            description: content.content.substring(0, 200)\n          }\n        };\n      }\n\n      // Post to Bluesky\n      const response = await this.agent.post(postData);\n\n      return this.createResult(\n        true,\n        response.uri,\n        `https://bsky.app/profile/${identifier}/post/${response.uri.split('/').pop()}`\n      );\n\n    } catch (error) {\n      return this.createResult(\n        false,\n        undefined,\n        undefined,\n        error instanceof Error ? error.message : 'Unknown error'\n      );\n    }\n  }\n\n  async gatherAnalytics(postUrl: string): Promise<PostAnalytics> {\n    try {\n      this.validateCredentials();\n\n      // Extract post information from Bluesky URL\n      // URL format: https://bsky.app/profile/username/post/postId\n      const urlMatch = postUrl.match(/\\/profile\\/([^\\/]+)\\/post\\/([^\\/]+)/);\n      if (!urlMatch) {\n        throw new Error(`Invalid Bluesky URL format: ${postUrl}`);\n      }\n\n      const username = urlMatch[1];\n      const postId = urlMatch[2];\n\n      const { identifier, password } = this.credentials;\n\n      // Login to Bluesky\n      await this.agent.login({\n        identifier,\n        password\n      });\n\n      // Get post thread to see engagement metrics\n      const threadResponse = await this.agent.getPostThread({\n        uri: `at://${username}/app.bsky.feed.post/${postId}`\n      });\n\n      const post = threadResponse.data.thread.post as any;\n\n      return {\n        likes: post.likeCount || 0,\n        reposts: post.repostCount || 0,\n        replies: post.replyCount || 0,\n        views: post.viewCount || 0\n      };\n\n    } catch (error) {\n      console.warn(`Failed to gather Bluesky analytics for ${postUrl}:`, error);\n      return {};\n    }\n  }\n\n  /**\n   * Discover recent posts from the user's account\n   */\n  async discoverPosts(limit: number = 20): Promise<Array<{url: string, content: string, createdAt: Date, analytics: PostAnalytics}>> {\n    try {\n      this.validateCredentials();\n\n      const { identifier, password } = this.credentials;\n\n      // Login to Bluesky\n      await this.agent.login({\n        identifier,\n        password\n      });\n\n      // Get user's profile\n      const profile = await this.agent.getProfile({ actor: identifier });\n\n      // Get recent posts from the user's feed\n      const response = await this.agent.getAuthorFeed({\n        actor: identifier,\n        limit: limit\n      });\n\n      const posts = response.data.feed.map((item: any) => {\n        const post = item.post;\n        const record = post.record;\n\n        return {\n          url: `https://bsky.app/profile/${post.author.handle}/post/${post.uri.split('/').pop()}`,\n          content: record.text || '',\n          createdAt: new Date(record.createdAt),\n          analytics: {\n            likes: post.likeCount || 0,\n            reposts: post.repostCount || 0,\n            replies: post.replyCount || 0,\n            views: post.viewCount || 0\n          }\n        };\n      });\n\n      return posts;\n\n    } catch (error) {\n      console.warn(`Failed to discover Bluesky posts:`, error);\n      return [];\n    }\n  }\n}\n","import { BasePlatform, PostAnalytics } from './BasePlatform';\nimport { SocialPost, PostingResult } from '../types';\nimport { Client, GatewayIntentBits, TextChannel } from 'discord.js';\n\nexport class DiscordPlatform extends BasePlatform {\n  private client: Client;\n\n  constructor(credentials: Record<string, string>) {\n    super(credentials);\n    this.client = new Client({\n      intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages]\n    });\n  }\n\n  get name(): string {\n    return 'discord';\n  }\n\n  get displayName(): string {\n    return 'Discord';\n  }\n\n  protected getRequiredCredentials(): string[] {\n    return ['token', 'channelId'];\n  }\n\n  async post(content: SocialPost): Promise<PostingResult> {\n    try {\n      this.validateCredentials();\n\n      const { token, channelId } = this.credentials;\n\n      // Login to Discord\n      await this.client.login(token);\n\n      // Wait for client to be ready\n      await new Promise<void>((resolve) => {\n        if (this.client.isReady()) {\n          resolve();\n        } else {\n          this.client.once('ready', () => resolve());\n        }\n      });\n\n      // Get the channel\n      const channel = await this.client.channels.fetch(channelId) as TextChannel;\n\n      if (!channel) {\n        throw new Error('Channel not found');\n      }\n\n      // Prepare the message content\n      let message = content.content;\n\n      if (content.title) {\n        message = `**${content.title}**\\n\\n${content.content}`;\n      }\n\n      // Add URL if provided\n      if (content.url) {\n        message += `\\n\\n${content.url}`;\n      }\n\n      // Send the message\n      const sentMessage = await channel.send(message);\n\n      // Logout\n      await this.client.destroy();\n\n      return this.createResult(\n        true,\n        sentMessage.id,\n        sentMessage.url\n      );\n\n    } catch (error) {\n      // Make sure to destroy client on error\n      if (this.client) {\n        await this.client.destroy();\n      }\n\n      return this.createResult(\n        false,\n        undefined,\n        undefined,\n        error instanceof Error ? error.message : 'Unknown error'\n      );\n    }\n  }\n\n  async gatherAnalytics(postUrl: string): Promise<PostAnalytics> {\n    try {\n      this.validateCredentials();\n\n      // Extract message information from Discord URL\n      // URL format: https://discord.com/channels/guildId/channelId/messageId\n      const urlMatch = postUrl.match(/\\/channels\\/([^\\/]+)\\/([^\\/]+)\\/([^\\/]+)/);\n      if (!urlMatch) {\n        throw new Error(`Invalid Discord URL format: ${postUrl}`);\n      }\n\n      const [, guildId, channelId, messageId] = urlMatch;\n\n      const { token } = this.credentials;\n\n      // Initialize Discord client\n      this.client = new Client({\n        intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent]\n      });\n\n      await this.client.login(token);\n\n      // Get the message\n      const channel = await this.client.channels.fetch(channelId) as TextChannel;\n      const message = await channel.messages.fetch(messageId);\n\n      // Count reactions\n      const totalReactions = message.reactions.cache.reduce((total, reaction) => {\n        return total + reaction.count;\n      }, 0);\n\n      // Logout\n      await this.client.destroy();\n\n      return {\n        likes: totalReactions, // reactions as likes\n        replies: 0 // Discord doesn't expose reply counts easily\n      };\n\n    } catch (error) {\n      console.warn(`Failed to gather Discord analytics for ${postUrl}:`, error);\n      // Make sure to destroy client on error\n      if (this.client) {\n        await this.client.destroy();\n      }\n      return {};\n    }\n  }\n\n  /**\n   * Discover recent posts from the user's account (not well supported by Discord API)\n   */\n  async discoverPosts(limit: number = 20): Promise<Array<{url: string, content: string, createdAt: Date, analytics: PostAnalytics}>> {\n    // Discord API doesn't provide a good way to discover user's own posts\n    // This would require searching through channels the bot has access to\n    console.warn('Discord post discovery not implemented - Discord API limitations');\n    return [];\n  }\n}\n","import { BasePlatform, PostAnalytics } from './BasePlatform';\nimport { SocialPost, PostingResult } from '../types';\nimport axios from 'axios';\n\nexport class RedditPlatform extends BasePlatform {\n  private accessToken: string | null = null;\n\n  get name(): string {\n    return 'reddit';\n  }\n\n  get displayName(): string {\n    return 'Reddit';\n  }\n\n  protected getRequiredCredentials(): string[] {\n    return ['clientId', 'clientSecret', 'username', 'password'];\n  }\n\n  async post(content: SocialPost): Promise<PostingResult> {\n    try {\n      this.validateCredentials();\n\n      // Get access token if we don't have one\n      if (!this.accessToken) {\n        await this.authenticate();\n      }\n\n      const { subreddit = 'hyperdrift' } = this.credentials;\n\n      // Prepare the post data\n      const postData: any = {\n        title: content.title || 'New Post',\n        text: content.content,\n        kind: 'self', // Text post\n        sr: subreddit\n      };\n\n      // Add URL if provided (link post instead of text post)\n      if (content.url) {\n        postData.kind = 'link';\n        postData.url = content.url;\n        // For link posts, text becomes the comment\n        if (content.content) {\n          postData.text = content.content;\n        }\n      }\n\n      // Submit the post\n      const response = await axios.post(\n        'https://oauth.reddit.com/api/submit',\n        new URLSearchParams(postData).toString(),\n        {\n          headers: {\n            'Authorization': `Bearer ${this.accessToken}`,\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'User-Agent': 'HyperPost:v0.1.0 (by /u/hyperdrift)'\n          }\n        }\n      );\n\n      if (response.data.success) {\n        const postId = response.data.jquery?.[10]?.[3]?.[0]?.data?.id;\n        const postUrl = `https://reddit.com/r/${subreddit}/comments/${postId}`;\n\n        return this.createResult(true, postId, postUrl);\n      } else {\n        return this.createResult(false, undefined, undefined, 'Reddit API submission failed');\n      }\n\n      } catch (error: any) {\n        // Check if token expired and try to refresh\n        if (error.response?.status === 401) {\n          this.accessToken = null;\n          try {\n            await this.authenticate();\n            // Retry the post\n            return this.post(content);\n          } catch (retryError) {\n            return this.createResult(false, undefined, undefined, 'Authentication failed');\n          }\n        }\n\n        return this.createResult(\n          false,\n          undefined,\n          undefined,\n          error.response?.data?.message || error.message || 'Unknown error'\n        );\n      }\n  }\n\n  private async authenticate(): Promise<void> {\n    try {\n      const { clientId, clientSecret, username, password } = this.credentials;\n\n      // Get access token using script authentication\n      const auth = Buffer.from(`${clientId}:${clientSecret}`).toString('base64');\n\n      const response = await axios.post(\n        'https://www.reddit.com/api/v1/access_token',\n        new URLSearchParams({\n          grant_type: 'password',\n          username,\n          password\n        }).toString(),\n        {\n          headers: {\n            'Authorization': `Basic ${auth}`,\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'User-Agent': 'HyperPost:v0.1.0 (by /u/hyperdrift)'\n          }\n        }\n      );\n\n      if (response.data.access_token) {\n        this.accessToken = response.data.access_token;\n      } else {\n        throw new Error('Failed to get access token');\n      }\n    } catch (error: any) {\n      throw new Error(`Reddit authentication failed: ${error.response?.data?.error || error.message || 'Unknown error'}`);\n    }\n  }\n\n  async gatherAnalytics(postUrl: string): Promise<PostAnalytics> {\n    try {\n      this.validateCredentials();\n      if (!this.accessToken) {\n        await this.authenticate();\n      }\n\n      // Extract post information from Reddit URL\n      // URL format: https://www.reddit.com/r/subreddit/comments/postId/title/\n      const urlMatch = postUrl.match(/\\/r\\/[^\\/]+\\/comments\\/([^\\/]+)/);\n      if (!urlMatch) {\n        throw new Error(`Invalid Reddit URL format: ${postUrl}`);\n      }\n\n      const postId = urlMatch[1];\n\n      // Get post information from Reddit API\n      const response = await axios.get(\n        `https://oauth.reddit.com/by_id/t3_${postId}`,\n        {\n          headers: {\n            'Authorization': `Bearer ${this.accessToken}`,\n            'User-Agent': 'HyperPost:v0.1.0 (by /u/hyperdrift)'\n          }\n        }\n      );\n\n      if (response.data && response.data.data && response.data.data.children.length > 0) {\n        const post = response.data.data.children[0].data;\n\n        return {\n          likes: post.score || 0, // upvotes - downvotes\n          replies: post.num_comments || 0,\n          views: post.view_count || 0,\n          reposts: post.num_crossposts || 0\n        };\n      }\n\n      return {};\n\n    } catch (error: any) {\n      console.warn(`Failed to gather Reddit analytics for ${postUrl}:`, error);\n      return {};\n    }\n  }\n\n  /**\n   * Discover recent posts from the user's account\n   */\n  async discoverPosts(limit: number = 20): Promise<Array<{url: string, content: string, createdAt: Date, analytics: PostAnalytics}>> {\n    try {\n      this.validateCredentials();\n      if (!this.accessToken) {\n        await this.authenticate();\n      }\n\n      const { username } = this.credentials;\n\n      // Get user's recent posts\n      const response = await axios.get(`https://oauth.reddit.com/user/${username}/submitted`, {\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'User-Agent': 'HyperPost:v0.1.0 (by /u/hyperdrift)'\n        },\n        params: {\n          limit: limit,\n          sort: 'new'\n        }\n      });\n\n      const posts = response.data.data.children.map((child: any) => {\n        const post = child.data;\n        return {\n          url: `https://www.reddit.com${post.permalink}`,\n          content: post.selftext || post.title,\n          createdAt: new Date(post.created_utc * 1000),\n          analytics: {\n            likes: post.score || 0,\n            reposts: 0, // Reddit doesn't have reposts\n            replies: post.num_comments || 0,\n            views: 0 // Reddit doesn't expose view counts easily\n          }\n        };\n      });\n\n      return posts;\n\n    } catch (error: any) {\n      console.warn(`Failed to discover Reddit posts:`, error);\n      return [];\n    }\n  }\n}\n","import { BasePlatform, PostAnalytics } from './BasePlatform';\nimport { SocialPost, PostingResult } from '../types';\nimport axios from 'axios';\n\nexport class DevtoPlatform extends BasePlatform {\n  get name(): string {\n    return 'devto';\n  }\n\n  get displayName(): string {\n    return 'Dev.to';\n  }\n\n  protected getRequiredCredentials(): string[] {\n    return ['apiKey'];\n  }\n\n  async post(content: SocialPost): Promise<PostingResult> {\n    try {\n      this.validateCredentials();\n\n      const { apiKey } = this.credentials;\n\n      // Prepare article data for Dev.to\n      const articleData = {\n        article: {\n          title: content.title || content.content.substring(0, 50) + (content.content.length > 50 ? '...' : ''),\n          body_markdown: content.content,\n          published: true,\n          tags: content.tags || [],\n          canonical_url: content.url\n        }\n      };\n\n      // Post to Dev.to\n      const response = await axios.post('https://dev.to/api/articles', articleData, {\n        headers: {\n          'Api-Key': apiKey,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      const article = response.data;\n\n      return this.createResult(\n        true,\n        article.id.toString(),\n        article.url\n      );\n\n    } catch (error: any) {\n      console.error('Dev.to posting error:', error.response?.data || error.message);\n      return this.createResult(\n        false,\n        undefined,\n        undefined,\n        error.response?.data?.error || error.message\n      );\n    }\n  }\n\n  async gatherAnalytics(postUrl: string): Promise<PostAnalytics> {\n    try {\n      this.validateCredentials();\n\n      const { apiKey } = this.credentials;\n\n      // Extract article ID from Dev.to URL\n      // URL format: https://dev.to/username/slug or https://dev.to/username/slug-123abc\n      const urlMatch = postUrl.match(/\\/([^\\/]+)\\/([^\\/\\-]+)(?:-([a-z0-9]+))?$/);\n      if (!urlMatch) {\n        throw new Error(`Invalid Dev.to URL format: ${postUrl}`);\n      }\n\n      const username = urlMatch[1];\n      const slug = urlMatch[2];\n      const id = urlMatch[3];\n\n      // Get article by ID if available, otherwise get user's articles and find by slug\n      let article;\n      if (id) {\n        // Get article by ID\n        const response = await axios.get(`https://dev.to/api/articles/${id}`, {\n          headers: {\n            'Api-Key': apiKey\n          }\n        });\n        article = response.data;\n      } else {\n        // Get user's articles and find by slug\n        const response = await axios.get('https://dev.to/api/articles/me', {\n          headers: {\n            'Api-Key': apiKey\n          }\n        });\n        const articles = response.data;\n        article = articles.find((a: any) => a.slug === slug || a.slug.startsWith(slug));\n      }\n\n      if (!article) {\n        console.warn(`Could not find Dev.to article for URL: ${postUrl}`);\n        return {};\n      }\n\n      return {\n        likes: article.positive_reactions_count || 0,\n        reposts: 0, // Dev.to doesn't have reposts\n        replies: article.comments_count || 0,\n        views: article.page_views_count || 0\n      };\n\n    } catch (error: any) {\n      console.warn(`Failed to gather Dev.to analytics for ${postUrl}:`, error.response?.data || error.message);\n      return {};\n    }\n  }\n\n  /**\n   * Discover recent articles from the user's account\n   */\n  async discoverPosts(limit: number = 20): Promise<Array<{url: string, content: string, createdAt: Date, analytics: PostAnalytics}>> {\n    try {\n      this.validateCredentials();\n\n      const { apiKey } = this.credentials;\n\n      // Get user's published articles\n      const response = await axios.get('https://dev.to/api/articles/me/published', {\n        headers: {\n          'Api-Key': apiKey\n        },\n        params: {\n          per_page: Math.min(limit, 100) // Dev.to limits to 100 per page\n        }\n      });\n\n      const articles = response.data;\n\n      return articles.map((article: any) => ({\n        url: article.url,\n        content: article.body_markdown || article.description || article.title,\n        createdAt: new Date(article.created_at),\n        analytics: {\n          likes: article.positive_reactions_count || 0,\n          reposts: 0,\n          replies: article.comments_count || 0,\n          views: article.page_views_count || 0\n        }\n      }));\n\n    } catch (error: any) {\n      console.warn(`Failed to discover Dev.to posts:`, error.response?.data || error.message);\n      return [];\n    }\n  }\n}\n","import { BasePlatform, PostAnalytics } from './BasePlatform';\nimport { SocialPost, PostingResult } from '../types';\nimport axios from 'axios';\n\nexport class MediumPlatform extends BasePlatform {\n  get name(): string {\n    return 'medium';\n  }\n\n  get displayName(): string {\n    return 'Medium';\n  }\n\n  protected getRequiredCredentials(): string[] {\n    return ['integrationToken'];\n  }\n\n  async post(content: SocialPost): Promise<PostingResult> {\n    try {\n      this.validateCredentials();\n\n      const { integrationToken } = this.credentials;\n\n      // First get user info to get author ID\n      const userResponse = await axios.get('https://api.medium.com/v1/me', {\n        headers: {\n          'Authorization': `Bearer ${integrationToken}`,\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Accept-Charset': 'utf-8'\n        }\n      });\n\n      const userId = userResponse.data.data.id;\n\n      // Prepare post data for Medium\n      const postData = {\n        title: content.title || content.content.substring(0, 50) + (content.content.length > 50 ? '...' : ''),\n        contentFormat: 'markdown',\n        content: content.content,\n        canonicalUrl: content.url,\n        tags: content.tags || [],\n        publishStatus: 'public'\n      };\n\n      // Post to Medium\n      const response = await axios.post(`https://api.medium.com/v1/users/${userId}/posts`, postData, {\n        headers: {\n          'Authorization': `Bearer ${integrationToken}`,\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Accept-Charset': 'utf-8'\n        }\n      });\n\n      const post = response.data.data;\n\n      return this.createResult(\n        true,\n        post.id,\n        post.url\n      );\n\n    } catch (error: any) {\n      console.error('Medium posting error:', error.response?.data || error.message);\n      return this.createResult(\n        false,\n        undefined,\n        undefined,\n        error.response?.data?.errors?.[0]?.message || error.message\n      );\n    }\n  }\n\n  async gatherAnalytics(postUrl: string): Promise<PostAnalytics> {\n    try {\n      this.validateCredentials();\n\n      const { integrationToken } = this.credentials;\n\n      // Extract post ID from Medium URL\n      // URL format: https://medium.com/@username/post-title-hash\n      const urlMatch = postUrl.match(/\\/([^\\/]+)$/);\n      if (!urlMatch) {\n        throw new Error(`Invalid Medium URL format: ${postUrl}`);\n      }\n\n      const postId = urlMatch[1];\n\n      // Medium doesn't have a public API for analytics\n      // We can only get basic info about the post\n      const response = await axios.get(`https://api.medium.com/v1/posts/${postId}`, {\n        headers: {\n          'Authorization': `Bearer ${integrationToken}`,\n          'Accept': 'application/json'\n        }\n      });\n\n      const post = response.data.data;\n\n      return {\n        likes: post.clapCount || 0,\n        replies: 0, // Medium doesn't expose comment counts easily\n        views: 0, // Medium doesn't expose view counts in API\n        bookmarks: post.voterCount || 0\n      };\n\n    } catch (error: any) {\n      console.warn(`Failed to gather Medium analytics for ${postUrl}:`, error.response?.data || error.message);\n      return {};\n    }\n  }\n\n  /**\n   * Discover recent posts from the user's account\n   */\n  async discoverPosts(limit: number = 20): Promise<Array<{url: string, content: string, createdAt: Date, analytics: PostAnalytics}>> {\n    try {\n      this.validateCredentials();\n\n      const { integrationToken } = this.credentials;\n\n      // Get user publications and posts\n      const userResponse = await axios.get('https://api.medium.com/v1/me', {\n        headers: {\n          'Authorization': `Bearer ${integrationToken}`,\n          'Accept': 'application/json'\n        }\n      });\n\n      const userId = userResponse.data.data.id;\n\n      // Get user's posts\n      const postsResponse = await axios.get(`https://api.medium.com/v1/users/${userId}/posts`, {\n        headers: {\n          'Authorization': `Bearer ${integrationToken}`,\n          'Accept': 'application/json'\n        },\n        params: {\n          limit: Math.min(limit, 50) // Medium limits to 50\n        }\n      });\n\n      const posts = postsResponse.data.data;\n\n      return posts.map((post: any) => ({\n        url: post.url,\n        content: post.title + '\\n\\n' + (post.virtuals?.subtitle || ''),\n        createdAt: new Date(post.createdAt),\n        analytics: {\n          likes: post.clapCount || 0,\n          replies: 0,\n          views: 0,\n          bookmarks: post.voterCount || 0\n        }\n      }));\n\n    } catch (error: any) {\n      console.warn(`Failed to discover Medium posts:`, error.response?.data || error.message);\n      return [];\n    }\n  }\n}\n","import {\n  SocialPost,\n  PlatformCredentials,\n  PlatformConfig,\n  MultiPlatformResult,\n  PostingResult,\n  SupportedPlatforms\n} from './types';\nimport {\n  MastodonPlatform,\n  BlueskyPlatform,\n  DiscordPlatform,\n  RedditPlatform,\n  DevtoPlatform,\n  MediumPlatform,\n  BasePlatform\n} from './platforms';\nimport * as crypto from 'crypto';\nimport { prisma } from './database';\n\nexport class HyperPost {\n  private platforms: Map<string, BasePlatform> = new Map();\n  private duplicateCheckWindow: number = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n\n  constructor(credentials: PlatformCredentials) {\n    this.initializePlatforms(credentials);\n    this.initializeDatabase();\n  }\n\n  /**\n   * Initialize database tables and ensure platforms exist\n   */\n  private async initializeDatabase(): Promise<void> {\n    try {\n      // Ensure platforms exist in database\n      const platformData = [\n        { name: 'mastodon', displayName: 'Mastodon' },\n        { name: 'bluesky', displayName: 'Bluesky' },\n        { name: 'reddit', displayName: 'Reddit' },\n        { name: 'discord', displayName: 'Discord' },\n        { name: 'devto', displayName: 'Dev.to' },\n        { name: 'medium', displayName: 'Medium' }\n      ];\n\n      for (const platform of platformData) {\n        await prisma.platform.upsert({\n          where: { name: platform.name },\n          update: { displayName: platform.displayName },\n          create: platform\n        });\n      }\n    } catch (error) {\n      console.warn('Database initialization warning:', error);\n      // Continue without database - fallback to in-memory tracking\n    }\n  }\n\n  /**\n   * Generate content hash for deduplication\n   */\n  private generateContentHash(content: SocialPost): string {\n    const contentString = `${content.title || ''}|${content.content}|${content.url || ''}`;\n    return crypto.createHash('sha256').update(contentString).digest('hex');\n  }\n\n  /**\n   * Check if content has been posted recently to a specific platform\n   */\n  private async isDuplicate(content: SocialPost, platformName: string): Promise<{ isDuplicate: boolean; postedTo: string[]; lastPosted?: Date }> {\n    try {\n      const contentHash = this.generateContentHash(content);\n      const cutoffTime = new Date(Date.now() - this.duplicateCheckWindow);\n\n      // Find the post in database\n      const post = await prisma.post.findUnique({\n        where: { contentHash },\n        include: {\n          postPlatforms: {\n            where: {\n              postedAt: { gte: cutoffTime },\n              platform: { name: platformName }\n            },\n            include: {\n              platform: true\n            }\n          }\n        }\n      });\n\n      if (!post) {\n        return { isDuplicate: false, postedTo: [] };\n      }\n\n      // Check if it was posted to this specific platform recently\n      const postedToThisPlatform = post.postPlatforms.length > 0;\n      const postedTo = post.postPlatforms.map((pp: any) => pp.platform.name);\n\n      return {\n        isDuplicate: postedToThisPlatform,\n        postedTo,\n        lastPosted: post.postPlatforms[0]?.postedAt\n      };\n    } catch (error) {\n      console.warn('Database query failed, falling back to allowing post:', error);\n      return { isDuplicate: false, postedTo: [] };\n    }\n  }\n\n  /**\n   * Record a successful post\n   */\n  private async recordPost(content: SocialPost, platformName: string, result: PostingResult): Promise<void> {\n    if (!result.success || !result.url) return;\n\n    try {\n      const contentHash = this.generateContentHash(content);\n\n      // Get or create the platform\n      const platform = await prisma.platform.findUnique({\n        where: { name: platformName }\n      });\n\n      if (!platform) {\n        console.warn(`Platform ${platformName} not found in database`);\n        return;\n      }\n\n      // Create or update the post\n      const post = await prisma.post.upsert({\n        where: { contentHash },\n        update: {\n          title: content.title,\n          content: content.content,\n          url: content.url\n        },\n        create: {\n          contentHash,\n          title: content.title,\n          content: content.content,\n          url: content.url\n        }\n      });\n\n      // Create the post-platform relationship\n      await prisma.postPlatform.create({\n        data: {\n          postId: post.id,\n          platformId: platform.id,\n          postUrl: result.url\n        }\n      });\n\n    } catch (error) {\n      console.warn('Failed to record post in database:', error);\n    }\n  }\n\n  private initializePlatforms(credentials: PlatformCredentials): void {\n    // Mastodon\n    if (credentials.mastodon) {\n      this.platforms.set('mastodon', new MastodonPlatform(credentials.mastodon));\n    }\n\n    // Bluesky\n    if (credentials.bluesky) {\n      this.platforms.set('bluesky', new BlueskyPlatform(credentials.bluesky));\n    }\n\n    // Discord\n    if (credentials.discord) {\n      this.platforms.set('discord', new DiscordPlatform(credentials.discord));\n    }\n\n    // Reddit\n    if (credentials.reddit) {\n      this.platforms.set('reddit', new RedditPlatform(credentials.reddit));\n    }\n\n    // Dev.to\n    if (credentials.devto) {\n      this.platforms.set('devto', new DevtoPlatform(credentials.devto));\n    }\n\n    // Medium\n    if (credentials.medium) {\n      this.platforms.set('medium', new MediumPlatform(credentials.medium));\n    }\n  }\n\n  /**\n   * Post to a single platform\n   */\n  async postToPlatform(platform: SupportedPlatforms, content: SocialPost): Promise<PostingResult> {\n    const platformInstance = this.platforms.get(platform);\n\n    if (!platformInstance) {\n      return {\n        platform,\n        success: false,\n        error: `Platform ${platform} not configured or credentials missing`\n      };\n    }\n\n    // Check for duplicates\n    const duplicateCheck = await this.isDuplicate(content, platform);\n    if (duplicateCheck.isDuplicate) {\n      const lastPosted = duplicateCheck.lastPosted ?\n        ` (last posted: ${duplicateCheck.lastPosted.toLocaleString()})` : '';\n      return {\n        platform,\n        success: false,\n        error: `Duplicate content: This post was already sent to ${platform} recently${lastPosted}. Previously posted to: ${duplicateCheck.postedTo.join(', ')}`\n      };\n    }\n\n    const result = await platformInstance.post(content);\n\n    // Record successful posts\n    await this.recordPost(content, platform, result);\n\n    return result;\n  }\n\n  /**\n   * Post to all configured platforms\n   */\n  async postToAll(content: SocialPost): Promise<MultiPlatformResult> {\n    const results: PostingResult[] = [];\n    let successful = 0;\n    let failed = 0;\n\n    const promises = Array.from(this.platforms.entries()).map(async ([name, platform]) => {\n      const result = await this.postToPlatform(name as SupportedPlatforms, content);\n      results.push(result);\n\n      if (result.success) {\n        successful++;\n      } else {\n        failed++;\n      }\n    });\n\n    await Promise.allSettled(promises);\n\n    return {\n      results,\n      successful,\n      failed\n    };\n  }\n\n  /**\n   * Post to specific platforms\n   */\n  async postToPlatforms(platforms: SupportedPlatforms[], content: SocialPost): Promise<MultiPlatformResult> {\n    const results: PostingResult[] = [];\n    let successful = 0;\n    let failed = 0;\n\n    const promises = platforms.map(async (platformName) => {\n      const result = await this.postToPlatform(platformName, content);\n      results.push(result);\n\n      if (result.success) {\n        successful++;\n      } else {\n        failed++;\n      }\n    });\n\n    await Promise.allSettled(promises);\n\n    return {\n      results,\n      successful,\n      failed\n    };\n  }\n\n  /**\n   * Get posted content history\n   */\n  async getPostedContentHistory(limit: number = 50): Promise<any[]> {\n    try {\n      const posts = await prisma.post.findMany({\n        take: limit,\n        orderBy: { createdAt: 'desc' },\n        include: {\n          postPlatforms: {\n            include: {\n              platform: true\n            }\n          }\n        }\n      });\n\n      return posts.map((post: any) => ({\n        contentHash: post.contentHash,\n        title: post.title,\n        content: post.content,\n        url: post.url,\n        platforms: post.postPlatforms.map((pp: any) => pp.platform.name),\n        timestamp: post.createdAt.getTime(),\n        postUrls: post.postPlatforms.map((pp: any) => ({\n          platform: pp.platform.name,\n          url: pp.postUrl,\n          postedAt: pp.postedAt\n        }))\n      }));\n    } catch (error) {\n      console.warn('Failed to fetch posting history:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Clear posted content history\n   */\n  async clearPostedContentHistory(): Promise<void> {\n    try {\n      await prisma.postPlatform.deleteMany();\n      await prisma.post.deleteMany();\n      console.log('✅ Posting history cleared from database.');\n    } catch (error) {\n      console.warn('Failed to clear posting history:', error);\n    }\n  }\n\n  /**\n   * Get posting analytics\n   */\n  async getPostingAnalytics(platform?: string, days: number = 30): Promise<any> {\n    try {\n      const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);\n\n      const analytics = await prisma.postPlatform.findMany({\n        where: {\n          postedAt: { gte: startDate },\n          ...(platform && {\n            platform: { name: platform }\n          })\n        },\n        include: {\n          platform: true,\n          post: true,\n          analytics: true\n        },\n        orderBy: { postedAt: 'desc' }\n      });\n\n      return {\n        totalPosts: analytics.length,\n        byPlatform: analytics.reduce((acc: Record<string, number>, item: any) => {\n          acc[item.platform.name] = (acc[item.platform.name] || 0) + 1;\n          return acc;\n        }, {} as Record<string, number>),\n        recentPosts: analytics.slice(0, 10),\n        engagementData: analytics.map((item: any) => ({\n          platform: item.platform.name,\n          postTitle: item.post.title,\n          url: item.postUrl,\n          postedAt: item.postedAt,\n          metrics: item.analytics.reduce((acc: Record<string, number>, metric: any) => {\n            acc[metric.metric] = metric.value;\n            return acc;\n          }, {} as Record<string, number>)\n        }))\n      };\n    } catch (error) {\n      console.warn('Failed to fetch analytics:', error);\n      return { totalPosts: 0, byPlatform: {}, recentPosts: [], engagementData: [] };\n    }\n  }\n\n  /**\n   * Gather analytics for all posts\n   */\n  async gatherAnalyticsForAllPosts(): Promise<any> {\n    try {\n      const results: any[] = [];\n      let totalProcessed = 0;\n      let totalUpdated = 0;\n\n      // Get all post platforms that need analytics updates (older than 1 hour)\n      const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n\n      const postPlatforms = await prisma.postPlatform.findMany({\n        where: {\n          analytics: {\n            none: {\n              recordedAt: { gte: oneHourAgo }\n            }\n          }\n        },\n        include: {\n          platform: true\n        }\n      });\n\n      for (const postPlatform of postPlatforms) {\n        try {\n          const platformInstance = this.platforms.get(postPlatform.platform.name);\n          if (!platformInstance) continue;\n\n          totalProcessed++;\n          const analytics = await platformInstance.gatherAnalytics(postPlatform.postUrl!);\n\n          // Store analytics in database (even if 0, to track that we gathered them)\n          for (const [metric, value] of Object.entries(analytics)) {\n            if (value !== undefined) {\n              await prisma.postAnalytics.upsert({\n                where: {\n                  postPlatformId_metric: {\n                    postPlatformId: postPlatform.id,\n                    metric\n                  }\n                },\n                update: {\n                  value: value || 0,\n                  recordedAt: new Date() // Update timestamp when we refresh analytics\n                },\n                create: {\n                  postPlatformId: postPlatform.id,\n                  metric,\n                  value: value || 0\n                }\n              });\n            }\n          }\n\n          results.push({\n            platform: postPlatform.platform.name,\n            url: postPlatform.postUrl,\n            analytics,\n            success: true\n          });\n\n          totalUpdated++;\n\n          // Small delay to avoid rate limiting\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n        } catch (error) {\n          results.push({\n            platform: postPlatform.platform.name,\n            url: postPlatform.postUrl,\n            error: error instanceof Error ? error.message : 'Unknown error',\n            success: false\n          });\n        }\n      }\n\n      return {\n        processed: totalProcessed,\n        updated: totalUpdated,\n        results\n      };\n\n    } catch (error) {\n      console.warn('Failed to gather analytics for posts:', error);\n      return { processed: 0, updated: 0, results: [] };\n    }\n  }\n\n  /**\n   * Set duplicate check window (in hours)\n   */\n  setDuplicateCheckWindow(hours: number): void {\n    this.duplicateCheckWindow = hours * 60 * 60 * 1000;\n  }\n\n  /**\n   * Get list of configured platforms\n   */\n  getConfiguredPlatforms(): string[] {\n    return Array.from(this.platforms.keys());\n  }\n\n  /**\n   * Check if a platform is configured\n   */\n  isPlatformConfigured(platform: SupportedPlatforms): boolean {\n    return this.platforms.has(platform);\n  }\n\n  /**\n   * Get a specific platform instance\n   */\n  getPlatform(platformName: string): BasePlatform | undefined {\n    return this.platforms.get(platformName);\n  }\n}\n"],"mappings":"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","names":["fs","path","baseTemplate","createInterface","axios","import_axios","axios","import_axios","axios","crypto","HyperPostSetup","prisma"]}